<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/8fb7355fd66c5aefab7d439df2403f49</icon>
  <subtitle>道阻且长, 行则将至</subtitle>
  <link href="http://xiaoyaolml.github.io/atom.xml" rel="self"/>
  
  <link href="http://xiaoyaolml.github.io/"/>
  <updated>2022-03-26T04:36:44.000Z</updated>
  <id>http://xiaoyaolml.github.io/</id>
  
  <author>
    <name>Leo</name>
    <email>xiaoyaolml@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs升级</title>
    <link href="http://xiaoyaolml.github.io/2022/03/26/nodejs%E5%8D%87%E7%BA%A7/"/>
    <id>http://xiaoyaolml.github.io/2022/03/26/nodejs%E5%8D%87%E7%BA%A7/</id>
    <published>2022-03-26T04:36:44.000Z</published>
    <updated>2022-03-26T04:36:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodejs在win10下升级"><a href="#nodejs在win10下升级" class="headerlink" title="nodejs在win10下升级"></a>nodejs在win10下升级</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看版本</span></span><br><span class="line">node -v</span><br><span class="line"><span class="comment">// 找到旧版nodejs的安装路径</span></span><br><span class="line">where node</span><br></pre></td></tr></table></figure><p>从<a href="http://nodejs.cn/download/">官网下载</a>新版的nodejs直接按照到该路径下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nodejs在win10下升级&quot;&gt;&lt;a href=&quot;#nodejs在win10下升级&quot; class=&quot;headerlink&quot; title=&quot;nodejs在win10下升级&quot;&gt;&lt;/a&gt;nodejs在win10下升级&lt;/h1&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="nodejs" scheme="http://xiaoyaolml.github.io/categories/nodejs/"/>
    
    
    <category term="nodejs" scheme="http://xiaoyaolml.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>git仓库迁移记录</title>
    <link href="http://xiaoyaolml.github.io/2022/03/21/git%E4%BB%93%E5%BA%93%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/"/>
    <id>http://xiaoyaolml.github.io/2022/03/21/git%E4%BB%93%E5%BA%93%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/</id>
    <published>2022-03-21T11:18:23.000Z</published>
    <updated>2022-03-21T11:18:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>把gitlab1下的某个仓库迁移到gitlab2下，且保留所有的commit记录。</p><span id="more"></span><p>目标是把旧的gitlab1下的某个仓库迁移到新建的gitlab2的某个仓库(<code>git@gitlabe2.ext.net.nokia.com:miali/jenkins-production-flow.git</code>),</p><h1 id="克隆旧地址"><a href="#克隆旧地址" class="headerlink" title="克隆旧地址"></a>克隆旧地址</h1><p>新建文件夹, 然后在该文件夹下输入以下 <code>git clone --bare &lt;old_git_repo&gt;</code> 命令克隆旧地址, 比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare git@gitlabe1.ext.net.nokia.com:miali/jenkins-production-flow.git</span><br></pre></td></tr></table></figure><p>执行完成之后在生成一个 <code>xxx.git</code> 文件夹(<code>jenkins-production-flow.git</code>)</p><h1 id="推送到新地址"><a href="#推送到新地址" class="headerlink" title="推送到新地址"></a>推送到新地址</h1><p>进入 <code>xxx.git</code> 文件夹，然后使用 <code>git push --mirror &lt;new_git_repo&gt;</code> 命令推送到新地址, 比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd jenkins-production-flow.git/</span><br><span class="line"></span><br><span class="line">git push --mirror git@gitlabe2.ext.net.nokia.com:miali/jenkins-production-flow.git</span><br></pre></td></tr></table></figure><p>以上两步就已经完成了仓库迁移。<br>接下来，可以把第一步生成的 <code>xxx.git</code>文件夹删掉, 然后从新地址直接克隆就行。</p><h1 id="从新地址克隆"><a href="#从新地址克隆" class="headerlink" title="从新地址克隆"></a>从新地址克隆</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitlabe2.ext.net.nokia.com:miali/jenkins-production-flow.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;把gitlab1下的某个仓库迁移到gitlab2下，且保留所有的commit记录。&lt;/p&gt;</summary>
    
    
    
    <category term="working" scheme="http://xiaoyaolml.github.io/categories/working/"/>
    
    
    <category term="git" scheme="http://xiaoyaolml.github.io/tags/git/"/>
    
    <category term="working" scheme="http://xiaoyaolml.github.io/tags/working/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加文章更新时间</title>
    <link href="http://xiaoyaolml.github.io/2018/03/14/hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4/"/>
    <id>http://xiaoyaolml.github.io/2018/03/14/hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4/</id>
    <published>2018-03-14T09:40:50.000Z</published>
    <updated>2018-03-14T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用next主题的文章，默认只显示<code>发表于yyyy-MM-dd</code>, 要添加更新时间则需要做额外的配置。本文记录一下修改配置的内容。</p><span id="more"></span><h1 id="修改主题布局"><a href="#修改主题布局" class="headerlink" title="修改主题布局"></a>修改主题布局</h1><p>修改 <code>themes/next/layout/_macro/post.swig</code>文件，在 <code>&lt;span class=&quot;post-time&quot;&gt;...&lt;/span&gt;</code> 标签后添加以下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span> post.<span class="property">updated</span> and post.<span class="property">updated</span> &gt; post.<span class="property">date</span>%&#125;</span><br><span class="line">  &lt;span <span class="keyword">class</span>=<span class="string">&quot;post-updated&quot;</span>&gt;</span><br><span class="line">    &amp;nbsp; | &amp;nbsp; &#123;&#123; <span class="title function_">__</span>(<span class="string">&#x27;post.updated&#x27;</span>) &#125;&#125;</span><br><span class="line">    &lt;time itemprop=<span class="string">&quot;dateUpdated&quot;</span> datetime=<span class="string">&quot;&#123;&#123; moment(post.updated).format() &#125;&#125;&quot;</span> content=<span class="string">&quot;&#123;&#123; date(post.updated, config.date_format) &#125;&#125;&quot;</span>&gt;</span><br><span class="line">      &#123;&#123; <span class="title function_">date</span>(post.<span class="property">updated</span>, config.<span class="property">date_format</span>) &#125;&#125;</span><br><span class="line">    &lt;/time&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h1 id="修改主题语言"><a href="#修改主题语言" class="headerlink" title="修改主题语言"></a>修改主题语言</h1><p>修改 <code>themes/next/languages/zh_Hans.yml</code> 文件，在<code>post</code>下添加一行<code>update: 更新于</code>，如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="attr">updated:</span> <span class="string">更新于</span></span><br></pre></td></tr></table></figure><h1 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h1><p>修改 <code>themes/next/_config.yml</code> 文件，添加一行，如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">display_updated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>写文件的时候在开头设置更新时间<code>updated: 时间</code>, 本篇文件的开头设置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">hexo添加文章更新时间</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">next主题</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-03-14 17:40:50</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2022-03-14 18:00:00</span></span><br></pre></td></tr></table></figure><p>如果不显示设置updated, 那么这个值就是md文件的最后修改时间。</p><h1 id="hexo的首页文章展示按更新时间排序"><a href="#hexo的首页文章展示按更新时间排序" class="headerlink" title="hexo的首页文章展示按更新时间排序"></a>hexo的首页文章展示按更新时间排序</h1><p>修改hexo的配置文件 <code>_config.yml</code>，把 <code>order_by: -date</code> 改成 <code>order_by: -updated</code>, 如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-updated</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://blog.csdn.net/ganzhilin520/article/details/79053399">hexo添加文章更新时间</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用next主题的文章，默认只显示&lt;code&gt;发表于yyyy-MM-dd&lt;/code&gt;, 要添加更新时间则需要做额外的配置。本文记录一下修改配置的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://xiaoyaolml.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://xiaoyaolml.github.io/tags/hexo/"/>
    
    <category term="next主题" scheme="http://xiaoyaolml.github.io/tags/next%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Studio进行NDK开发</title>
    <link href="http://xiaoyaolml.github.io/2016/05/30/%E4%BD%BF%E7%94%A8Android-Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/"/>
    <id>http://xiaoyaolml.github.io/2016/05/30/%E4%BD%BF%E7%94%A8Android-Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/</id>
    <published>2016-05-29T16:46:54.000Z</published>
    <updated>2016-05-29T17:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下使用Android Studio进行NDK开发的过程。</p><span id="more"></span><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>新建一个工程AndroidNdkFirst，Minimum SDK根据自己需要选择，我用的是API 16(即Android 4.1)，Activity选择Empty Activity。</p><h2 id="配置NDK"><a href="#配置NDK" class="headerlink" title="配置NDK"></a>配置NDK</h2><p>File &gt;&gt; Project Structure &gt;&gt; Download Android NDK<br>之后就开始下载android-ndk-r12-beta1-windows-x86_64.zip。</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8Android%20Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/%E4%B8%8B%E8%BD%BDNDK.png" alt="下载NDK" title="下载NDK"></p><p>下载完了之后自动解压安装到android-sdk根目录下的ndk-bundle目录。安装完成后自动填入了ndk路径，如下图，我这里是D:\Programs\android-sdk\ndk-bundle</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8Android%20Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/%E8%AE%BE%E7%BD%AENDK%E8%B7%AF%E5%BE%84.png" alt="设置NDK路径" title="设置NDK路径"></p><h2 id="配置Gradle"><a href="#配置Gradle" class="headerlink" title="配置Gradle"></a>配置Gradle</h2><ul><li>在grandle.properties文件末尾增加代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.useDeprecatedNdk=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>修改app&#x2F;build.gradle文件，在android{defaultConfig{…}}内部增加代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ndk &#123;</span><br><span class="line">     moduleName <span class="string">&quot;ndkfirst&quot;</span> </span><br><span class="line">     abiFilters <span class="string">&quot;armeabi&quot;</span>, <span class="string">&quot;armeabi-v7a&quot;</span>, <span class="string">&quot;x86&quot;</span>, <span class="string">&quot;mips&quot;</span>         </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">&#x27;23.0.3&#x27;</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.leon.androidndkfirst&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">16</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">        ndk &#123;</span><br><span class="line">            moduleName <span class="string">&quot;ndkfirst&quot;</span> <span class="comment">// 生成的so库</span></span><br><span class="line">            abiFilters <span class="string">&quot;armeabi&quot;</span>, <span class="string">&quot;armeabi-v7a&quot;</span>, <span class="string">&quot;x86&quot;</span>, <span class="string">&quot;mips&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles <span class="title function_">getDefaultProguardFile</span><span class="params">(<span class="string">&#x27;proguard-android.txt&#x27;</span>)</span>, <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="title function_">fileTree</span><span class="params">(include: [<span class="string">&#x27;*.jar&#x27;</span>], dir: <span class="string">&#x27;libs&#x27;</span>)</span></span><br><span class="line">    testCompile <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.support:appcompat-v7:23.3.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写NDK代码"><a href="#编写NDK代码" class="headerlink" title="编写NDK代码"></a>编写NDK代码</h2><p>以上配置完了就可以开发NDK了。<br>先新建ndk测试类NdkTest.java，package为com.leon.androidndkfirst，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leon.androidndkfirst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NdkTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//so库名称，对应libndkfirst.so</span></span><br><span class="line">        System.loadLibrary(<span class="string">&quot;ndkfirst&quot;</span>);     </span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">getStringFromNative</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意System.loadLibrary(“ndkfirst”)导入的so库要与Gradle中ndk配置一致。<br>接着Build &gt;&gt; Make Project，生成对应的NdkTest.class文件，文件所在位置app&#x2F;build&#x2F;intermediates&#x2F;classes&#x2F;debug&#x2F;com&#x2F;leon&#x2F;androidndkfirst&#x2F;NdkTest.class。如下图所示:</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8Android%20Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/%E7%B1%BB%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE.png" alt="类文件位置" title="类文件位置"></p><p>然后使用命令行生成c头文件，<br>打开Terminal终端，先进到项目的app&#x2F;src&#x2F;main目录，<code>cd app/src/main</code><br>用 javah 命令生成头文件，<br><code>javah -d jni -classpath ../../build/intermediates/classes/debug com.leon.androidndkfirst.NdkTest</code></p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8Android%20Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/javah%E5%91%BD%E4%BB%A4.png" alt="javah 命令" title="javah 命令"></p><p>执行完了之后在main目录下生成jni文件夹并在其中生成头文件<code>com_leon_androidndkfirst_NdkTest.h</code>文件，结果如下：</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8Android%20Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/%E7%94%9F%E6%88%90%E5%A4%B4%E6%96%87%E4%BB%B6.png" alt="javah 命令" title="javah 命令"></p><p>根据生成的.h头文件，在jni目录下新建c源文件ndk.c如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_leon_androidndkfirst_NdkTest.h&quot;</span></span></span><br><span class="line">JNIEXPORT jstring JNICALL <span class="title function_">Java_com_leon_androidndkfirst_NdkTest_getStringFromNative</span></span><br><span class="line">  <span class="params">(JNIEnv *env, jclass clazz)</span> &#123;</span><br><span class="line">  <span class="comment">// 返回一条字符串</span></span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">&quot;这是来自native的string&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用Native方法"><a href="#调用Native方法" class="headerlink" title="调用Native方法"></a>调用Native方法</h2><p>在Activity文件中调用getStringFromNative()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leon.androidndkfirst;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextView tvNative;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        tvNative = (TextView) findViewById(R.id.tvNative);</span><br><span class="line">        tvNative.setText(NdkTest.getStringFromNative());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>运行到模拟器的结果如下：</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8Android%20Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果" title="运行结果"></p><p>并且，在<code>app/build/intermediates/ndk/debug/lib</code>目录下生成了so库文件:</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/%E4%BD%BF%E7%94%A8Android%20Studio%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91/so%E5%BA%93%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE.png" alt="so库文件位置" title="so库文件位置"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>根据上面的过程，在android studio上进行ndk开发可以总结如下几步：</p><h2 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h2><p>一是在grandle.properties文件中添加<code>android.useDeprecatedNdk=true</code>;<br>二是在app&#x2F;build.gradle文件中的android{defaultConfig{…}}内部添加NDK配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ndk &#123;</span><br><span class="line">     moduleName <span class="string">&quot;动态库名&quot;</span> </span><br><span class="line">     abiFilters <span class="string">&quot;armeabi&quot;</span>, <span class="string">&quot;armeabi-v7a&quot;</span>, <span class="string">&quot;x86&quot;</span>, <span class="string">&quot;mips&quot;</span>         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><h3 id="加载动态库"><a href="#加载动态库" class="headerlink" title="加载动态库"></a>加载动态库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.loadLibrary(<span class="string">&quot;ndkfirst&quot;</span>); <span class="comment">//动态库库名称，对应libndkfirst.so</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义Native方法"><a href="#定义Native方法" class="headerlink" title="定义Native方法"></a>定义Native方法</h3><p>在新建的类中定义Native方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="title function_">getStringFromNative</span> <span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="生成头文件"><a href="#生成头文件" class="headerlink" title="生成头文件"></a>生成头文件</h3><p>进入app&#x2F;src&#x2F;main目录，用javah命令生成头文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -d jni -classpath ../../build/intermediates/classes/debug com.leon.androidndkfirst.NdkTest</span><br></pre></td></tr></table></figure><h3 id="编写JNI方法"><a href="#编写JNI方法" class="headerlink" title="编写JNI方法"></a>编写JNI方法</h3><p>在app&#x2F;src&#x2F;main&#x2F;jni目录下即可新建源文件后进行编写。</p><h3 id="Java调用"><a href="#Java调用" class="headerlink" title="Java调用"></a>Java调用</h3><p>在Activity中可以直接调用<code>NdkTest.getStringFromNative()</code>方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下使用Android Studio进行NDK开发的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="Android基础" scheme="http://xiaoyaolml.github.io/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Android" scheme="http://xiaoyaolml.github.io/tags/Android/"/>
    
    <category term="Android Studio" scheme="http://xiaoyaolml.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV4Android学习录Demo1</title>
    <link href="http://xiaoyaolml.github.io/2016/05/29/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/"/>
    <id>http://xiaoyaolml.github.io/2016/05/29/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/</id>
    <published>2016-05-28T17:15:58.000Z</published>
    <updated>2016-05-28T19:21:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV 3.1 在 samples目录下有几个示例Demo，其中第一个例子example-tutorial-1-camerapreview，用来获取摄像头输入帧，这篇博客记录了一下这个Demo在Android Studio下开发过程，以此开启OpenCV for Android之旅。</p><span id="more"></span><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>Windows 10 x64<br>JDK 1.8.0<br>Android 6.0（API 23，最低API 18）<br>OpenCV 3.1.0 for Android SDK<br>Android Studio 2.1.1（Gradle版本2.10）  </p><h1 id="导入OpenCV库"><a href="#导入OpenCV库" class="headerlink" title="导入OpenCV库"></a>导入OpenCV库</h1><h2 id="Import-Module"><a href="#Import-Module" class="headerlink" title="Import Module"></a>Import Module</h2><p>点击<code>File-&gt;New-&gt;Import Module…</code>，在弹出的窗口中找到OpenCV Android SDK下的sdk\java文件夹，点击Next，保持默认选项不动，再点击Finish，完成OpenCV库的导入。</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1%2F%E5%AF%BC%E5%85%A5OpenCV%E5%BA%93.png" alt="Import Module" title="Import Module"></p><h2 id="修改build-gradle"><a href="#修改build-gradle" class="headerlink" title="修改build.gradle"></a>修改build.gradle</h2><p>由于OpenCV库本身默认配置，我们需要修改OpenCVLibrary310\build.gradle文件，然后重新同步Gradle配置。修改OpenCVLibrary310\build.gradle文件与项目app的配置一致。修改前如下所示：</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1%2F%E4%BF%AE%E6%94%B9%E5%89%8D%E7%9A%84Gradle%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9.png" alt="build.gradle" title="build.gradle修改前"></p><p>修改后如下所示：</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84Gradle%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9.png" alt="build.gradle" title="build.gradle修改后"></p><p>具体对penCVLibrary310\build.gradle的修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.library&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;23.0.3&quot;</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">16</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles <span class="title function_">getDefaultProguardFile</span><span class="params">(<span class="string">&#x27;proguard-android.txt&#x27;</span>)</span>, <span class="string">&#x27;proguard-rules.txt&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置模块依赖"><a href="#配置模块依赖" class="headerlink" title="配置模块依赖"></a>配置模块依赖</h2><p>点击<code>File-&gt;Project Structure…</code>，在弹出的Project Structure窗口中选择左边的app，在右边选择Dependencies，然后点击绿色添加按钮，选择Module dependency，在弹出的窗口中选择OpenCVLibrary310，一直点击OK，保存并关闭两个窗口。</p><!-- <div  align="center">     <img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96.png"     width = "75%" height = "75%"" alt="配置模块依赖" title="配置模块依赖"/></div> --><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96.png" alt="build.gradle" title="配置模块依赖"></p><h2 id="添加jni库"><a href="#添加jni库" class="headerlink" title="添加jni库"></a>添加jni库</h2><p>复制OpenCV-android-sdk&#x2F;sdk&#x2F;native目录下的libs目录到工程的main目录下，重命名为jniLibs。</p><!-- <div align="center">     <img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E6%B7%BB%E5%8A%A0JNI%E5%BA%93.png"     width = "75%" height = "75%"" alt="添加jni库" title="添加jni库"/></div> --><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E6%B7%BB%E5%8A%A0JNI%E5%BA%93.png" alt="build.gradle" title="添加jni库"></p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><p>这个例子是基于Android Studio构建OpenCV工程，实现了OpenCV捕捉相机输入帧。工程代码已上传至github：<a href="https://github.com/xiaoyaolml/OpenCV4AndroidTutorial1.git">OpenCV4AndroidTutorial1</a>，下面简单介绍一下代码。</p><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><p>一是实现CameraBridgeViewBase.CvCameraViewListener2接口，用于获取摄像头操作；<br>二是加载OpenCV库，在onResume阶段加载。<br>具体可查看<a href="https://github.com/xiaoyaolml/OpenCV4AndroidTutorial1/blob/master/app/src/main/java/com/leon/opencv4android/tutorial1/MainActivity.java">MainActivity.java</a></p><h2 id="xml布局"><a href="#xml布局" class="headerlink" title="xml布局"></a>xml布局</h2><p>加入OpenCV自带的JavaCameraView组件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">org.opencv.android.JavaCameraView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/surfaceCamera&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:show_fps</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:camera_id</span>=<span class="string">&quot;any&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="manifest清单"><a href="#manifest清单" class="headerlink" title="manifest清单"></a>manifest清单</h2><p>添加使用相机权限和文件读写权限，还有应用特性支持：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera&quot;</span> <span class="attr">android:required</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera.autofocus&quot;</span> <span class="attr">android:required</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera.front&quot;</span> <span class="attr">android:required</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera.front.autofocus&quot;</span> <span class="attr">android:required</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><!-- <div  align="center">     <img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"     width = "75%" height = "75%"" alt="运行结果" title="运行结果"/></div> --><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果" title="运行结果"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li>这个小Demo演示了用Android Studio进行OpenCV开发的操作过程。</li><li>我们自建的项目有两种加载OpenCV库的方式：<br><code>OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_1_0, this, mLoaderCallback);</code>使用OpenCV Manager进行初始化，需要安装对应的OpenCV Manager，这种方式下，配置工程时可以直接跳过添加jni库环节；<br><code>mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</code> 使用jni库进行初始化。本例用的就是这种方式，无需安装Manger，只是在配置工程的时候添加jni库。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenCV 3.1 在 samples目录下有几个示例Demo，其中第一个例子example-tutorial-1-camerapreview，用来获取摄像头输入帧，这篇博客记录了一下这个Demo在Android Studio下开发过程，以此开启OpenCV for Android之旅。&lt;/p&gt;</summary>
    
    
    
    <category term="OpenCV4Android" scheme="http://xiaoyaolml.github.io/categories/OpenCV4Android/"/>
    
    
    <category term="Android" scheme="http://xiaoyaolml.github.io/tags/Android/"/>
    
    <category term="OpenCV" scheme="http://xiaoyaolml.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义画板</title>
    <link href="http://xiaoyaolml.github.io/2016/03/19/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E6%9D%BF/"/>
    <id>http://xiaoyaolml.github.io/2016/03/19/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E6%9D%BF/</id>
    <published>2016-03-19T08:34:57.000Z</published>
    <updated>2016-03-23T14:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a href="http://blog.csdn.net/lmj623565791/article/details/24252901">Android 自定义View (一)</a>这篇博客，总结出自定义View的步骤：  </p><blockquote><p>1、自定义View的属性<br>2、在View的构造方法中获得自定义属性<br>[3、重写onMesure]<br>4、重写onDraw  </p></blockquote><span id="more"></span><p>再参照<a href="http://www.oschina.net/translate/building-paint-application-android">构建一个 Android 的简单绘图应用</a>这篇翻译文章，以一个简单的画板例子走走整个流程。画板实现简单的随手涂鸦，双击清屏和按音量键分享的功能。</p><h1 id="自义定View"><a href="#自义定View" class="headerlink" title="自义定View"></a>自义定View</h1><h2 id="自定义View的属性"><a href="#自定义View的属性" class="headerlink" title="自定义View的属性"></a>自定义View的属性</h2><p>先在res&#x2F;values&#x2F;  下建立一个属性文件(<strong>attrs.xml</strong>), 在里面声明自定义属性。  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;MyView&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;paintColor&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;paintSize&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义了画笔颜色和粗细。</p><h2 id="获得自定义属性"><a href="#获得自定义属性" class="headerlink" title="获得自定义属性"></a>获得自定义属性</h2><p>在自定义View的构造方法中获得自定义属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">    <span class="type">TypedArray</span> <span class="variable">typedArray</span> <span class="operator">=</span> context.obtainStyledAttributes(attrs, R.styleable.MyView);</span><br><span class="line">    <span class="type">int</span> <span class="variable">paintColor</span> <span class="operator">=</span> typedArray.getColor(R.styleable.MyView_paintColor, Color.BLACK);</span><br><span class="line">    <span class="comment">//第二个参数为默认值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">paintSize</span> <span class="operator">=</span> typedArray.getDimensionPixelSize(R.styleable.MyView_paintSize, <span class="number">12</span>);</span><br><span class="line">    typedArray.recycle();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行画笔的相关设置</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写onDraw"><a href="#重写onDraw" class="headerlink" title="重写onDraw"></a>重写onDraw</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    canvas.drawPath(path, paint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写onTouchEvent事件"><a href="#重写onTouchEvent事件" class="headerlink" title="重写onTouchEvent事件"></a>重写onTouchEvent事件</h3><p>触碰屏幕和拖动手指的路径需要用onTouchEvent事件，并用Path对象封装路径，思路如下：</p><ul><li>首先，在我们第一次触碰屏幕(<code>MotionEvent.ACTION_DOWN</code>)时创建一个路径。<ul><li>这里需要一个双击判断，我们的思路是通过比较两次按下的时间间隔来判断</li></ul></li><li>然后，当手指拖动时，我们不断增加点到路径里(<code>MotionEvent.ACTION_MOVE</code>)</li><li>最后，当手指停止时，我们也停止增加点并且invalidate视图强行重绘。</li></ul><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">long</span> firstClick;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> countClick;<span class="comment">// 点击次数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="type">float</span> <span class="variable">pointX</span> <span class="operator">=</span> event.getX();</span><br><span class="line">    <span class="type">float</span> <span class="variable">pointY</span> <span class="operator">=</span> event.getY();</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 如果第二次点击距离第一次点击时间过长 那么将第二次点击看为第一次点击</span></span><br><span class="line">            <span class="keyword">if</span> (firstClick != <span class="number">0</span> &amp;&amp; System.currentTimeMillis() - firstClick &gt; <span class="number">200</span>) &#123;</span><br><span class="line">                countClick = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            countClick ++;</span><br><span class="line">            <span class="keyword">if</span> (countClick == <span class="number">1</span>) &#123;</span><br><span class="line">                firstClick = System.currentTimeMillis();</span><br><span class="line">                path.moveTo(pointX, pointY);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (countClick == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastClick</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                <span class="comment">// 两次点击小于200ms,进行双击清屏操作</span></span><br><span class="line">                <span class="keyword">if</span> (lastClick - firstClick &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                    path.reset();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            path.lineTo(pointX, pointY);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postInvalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此完成了自定义View的过程，接下来就是在程序中使用自定义View了。</p><h1 id="使用View"><a href="#使用View" class="headerlink" title="使用View"></a>使用View</h1><h2 id="在XML中布局"><a href="#在XML中布局" class="headerlink" title="在XML中布局"></a>在XML中布局</h2><p>先在布局文件(res&#x2F;layout&#x2F;<strong>activity_main.xml</strong>)中声明我们的自定义View。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.leon.myappdraw2.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:custom</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com.leon.myappdraw2.ui.MyView</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:id</span>=<span class="string">&quot;@+id/myView&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">custom:paintColor</span>=<span class="string">&quot;#00ffff&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">custom:paintSize</span>=<span class="string">&quot;12dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于自定义的paintColor和paintSize属性，需要引入 <strong>xmlns:custom&#x3D;”<a href="http://schemas.android.com/apk/res-auto&quot;">http://schemas.android.com/apk/res-auto&quot;</a></strong> 命名空间。</p><h2 id="在Acitvity中使用"><a href="#在Acitvity中使用" class="headerlink" title="在Acitvity中使用"></a>在Acitvity中使用</h2><p>在Acitvity中使用，主要实现两个功能：</p><ul><li>引入自定义View来画图</li><li>按音量键保存图片并分享</li></ul><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyView myView;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        myView= (MyView) findViewById(R.id.myView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onKeyDown</span><span class="params">(<span class="type">int</span> keyCode, KeyEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (keyCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_DOWN:</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_UP:</span><br><span class="line">                <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> Bitmap.createBitmap(myView.getWidth(), myView.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">                <span class="type">Canvas</span> <span class="variable">canvas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Canvas</span>(bitmap);</span><br><span class="line">                myView.draw(canvas);</span><br><span class="line">                <span class="type">String</span> <span class="variable">image</span> <span class="operator">=</span> saveBitmap(bitmap);</span><br><span class="line">                <span class="keyword">if</span> (image!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    shareImage(image);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;图片保存失败！&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统的分享图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shareImage</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="type">Uri</span> <span class="variable">imageUri</span> <span class="operator">=</span> Uri.fromFile(<span class="keyword">new</span> <span class="title class_">File</span>(filename));</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">shareIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        shareIntent.setAction(Intent.ACTION_SEND);</span><br><span class="line">        shareIntent.putExtra(Intent.EXTRA_STREAM, imageUri);</span><br><span class="line">        shareIntent.setType(<span class="string">&quot;image/*&quot;</span>);</span><br><span class="line">        startActivity(Intent.createChooser(shareIntent, <span class="string">&quot;分享到&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 保存图片到本地</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bitmap 要保存的bitmap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveBitmap</span><span class="params">(Bitmap bitmap)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">albumPath</span> <span class="operator">=</span> Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)</span><br><span class="line">                + File.separator + getString(R.string.app_name);</span><br><span class="line">        <span class="type">String</span> <span class="variable">imagePath</span> <span class="operator">=</span> albumPath+File.separator+System.currentTimeMillis() + <span class="string">&quot;.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">album</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(albumPath);</span><br><span class="line">        <span class="keyword">if</span> (!album.isDirectory()&amp;&amp;!album.mkdirs()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileOutputStream out;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(imagePath);</span><br><span class="line">            bitmap.compress(Bitmap.CompressFormat.PNG, <span class="number">90</span>, out);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="keyword">return</span> imagePath;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在AndroidManifest-xml中设置权限"><a href="#在AndroidManifest-xml中设置权限" class="headerlink" title="在AndroidManifest.xml中设置权限"></a>在AndroidManifest.xml中设置权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><div align="center">    <img src="http://7xrsz8.com1.z0.glb.clouddn.com/2%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E6%9D%BF1.png " width = "270" height = "480" alt="手写"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    <img src="http://7xrsz8.com1.z0.glb.clouddn.com/2%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E6%9D%BF2.png" width = "270" height = "480" alt="分享"/></div><h1 id="注意点备忘"><a href="#注意点备忘" class="headerlink" title="注意点备忘"></a>注意点备忘</h1><h2 id="AppCompat设置全屏"><a href="#AppCompat设置全屏" class="headerlink" title="AppCompat设置全屏"></a>AppCompat设置全屏</h2><p>在res&#x2F;values&#x2F;styles.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimary&quot;</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorAccent&quot;</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme.NoActionBar&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;windowActionBar&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme.NoActionBar.Fullscreen&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFullscreen&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowContentOverlay&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Markdown中插入图片怎么定义图片的大小或比例"><a href="#Markdown中插入图片怎么定义图片的大小或比例" class="headerlink" title="Markdown中插入图片怎么定义图片的大小或比例"></a><a href="http://www.zhihu.com/question/23378396">Markdown中插入图片怎么定义图片的大小或比例</a></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">width</span> = <span class="string">&quot;270&quot;</span> <span class="attr">height</span> = <span class="string">&quot;480&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片名称&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Paint的效果研究"><a href="#Paint的效果研究" class="headerlink" title="Paint的效果研究"></a><a href="http://blog.csdn.net/j236027367/article/details/42496441">Paint的效果研究</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 画笔颜色</span></span><br><span class="line">paint.setColor(paintColor);</span><br><span class="line"><span class="comment">// 画笔风格</span></span><br><span class="line">paint.setStyle(Paint.Style.STROKE);</span><br><span class="line"><span class="comment">// 画笔粗细</span></span><br><span class="line">paint.setStrokeWidth(paintSize);</span><br><span class="line"><span class="comment">//设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢</span></span><br><span class="line">paint.setAntiAlias(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰</span></span><br><span class="line">paint.setDither(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 圆角效果</span></span><br><span class="line">paint.setPathEffect(<span class="keyword">new</span> <span class="title class_">CornerPathEffect</span>(<span class="number">50</span>)); </span><br></pre></td></tr></table></figure><h2 id="Android的Environment类"><a href="#Android的Environment类" class="headerlink" title="Android的Environment类"></a><a href="http://blog.csdn.net/aiqing0119/article/details/7718494">Android的Environment类</a></h2><pre><code>getExternalStoragePublicDirectory(String type)的type类型</code></pre><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>DIRECTORY_PICTURES</td><td>图片存放的标准目录</td></tr><tr><td>DIRECTORY_DCIM</td><td>相机拍摄照片和视频的标准目录</td></tr><tr><td>DIRECTORY_ALARMS</td><td>系统提醒铃声存放的标准目录</td></tr><tr><td>DIRECTORY_DOWNLOADS</td><td>下载的标准目录</td></tr><tr><td>DIRECTORY_MOVIES</td><td>电影存放的标准目录</td></tr><tr><td>DIRECTORY_MUSIC</td><td>音乐存放的标准目录</td></tr><tr><td>DIRECTORY_NOTIFICATIONS</td><td>系统通知铃声存放的标准目录</td></tr><tr><td>DIRECTORY_PICTURES</td><td>图片存放的标准目录</td></tr><tr><td>DIRECTORY_PODCASTS</td><td>系统广播存放的标准目录</td></tr><tr><td>DIRECTORY_RINGTONES</td><td>系统铃声存放的标准目录</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/24252901&quot;&gt;Android 自定义View (一)&lt;/a&gt;这篇博客，总结出自定义View的步骤：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、自定义View的属性&lt;br&gt;2、在View的构造方法中获得自定义属性&lt;br&gt;[3、重写onMesure]&lt;br&gt;4、重写onDraw  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Android基础" scheme="http://xiaoyaolml.github.io/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Android" scheme="http://xiaoyaolml.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android画图一二</title>
    <link href="http://xiaoyaolml.github.io/2016/03/13/Android%E7%94%BB%E5%9B%BE%E4%B8%80%E4%BA%8C/"/>
    <id>http://xiaoyaolml.github.io/2016/03/13/Android%E7%94%BB%E5%9B%BE%E4%B8%80%E4%BA%8C/</id>
    <published>2016-03-13T08:34:57.000Z</published>
    <updated>2016-03-23T14:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>参考<a href="http://blog.csdn.net/u012637501/article/details/43484333">Android绘图深度解析</a>这篇博客，通过例子来了解Android画图过程：继承View组件→重写onDraw(canvas)方法，相关类和接口有：</p><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>Drawable</td><td>绘图结果表现出来的接口</td></tr><tr><td>Bitmap</td><td>可以来自资源或文件，也可以在程序中创建，实际上的功能相当于图片的存储空间</td></tr><tr><td>Canvas</td><td>代表了”依附”于指定View的画布，通过Canvas类的成员方法能够实现绘制各种图形</td></tr><tr><td>Paint</td><td>代表了Canvas上的画笔，主要用于设置绘制风格，画笔颜色，粗细，填充风格等。</td></tr><tr><td>Path</td><td>代表任意多条直线连接而成的任意图形，<code>canvas.drawPath(path,paint)</code>来绘制出任意形状的图形，另外通过PathEffect定义绘制路径图形效果</td></tr><tr><td>Shader</td><td>定义渐变填充，包含LinearGradient、RadialGradient和 SweepGradient</td></tr></tbody></table><span id="more"></span><p>可以看看<a href="http://erbo2008.iteye.com/blog/1545137">Android画布绘图</a>这个博客做进一步了解。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.LinearGradient;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Path;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Shader;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> com.leon.myappdraw1.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Android画图入门例子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写该方法，进行绘图</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        canvas.drawColor(Color.WHITE);  <span class="comment">// 把整张画布绘制成白色</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Paint</span> <span class="variable">paint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        paint.setAntiAlias(<span class="literal">true</span>); <span class="comment">// 抗锯齿</span></span><br><span class="line">        paint.setColor(Color.BLUE); <span class="comment">// 画笔颜色</span></span><br><span class="line">        paint.setStyle(Paint.Style.STROKE); <span class="comment">// 绘制风格（空心或实心）</span></span><br><span class="line">        paint.setStrokeWidth(<span class="number">3</span>);            <span class="comment">// 线框粗细</span></span><br><span class="line"></span><br><span class="line">        canvas.drawCircle(<span class="number">40</span>, <span class="number">40</span>, <span class="number">30</span>, paint);   <span class="comment">// 绘制圆形</span></span><br><span class="line">        canvas.drawRect(<span class="number">10</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">140</span>, paint); <span class="comment">// 绘制正方形</span></span><br><span class="line">        canvas.drawRect(<span class="number">10</span>, <span class="number">150</span>, <span class="number">70</span>, <span class="number">190</span>, paint); <span class="comment">// 绘制矩形</span></span><br><span class="line">        canvas.drawRoundRect(<span class="keyword">new</span> <span class="title class_">RectF</span>(<span class="number">10</span>, <span class="number">200</span>, <span class="number">70</span>, <span class="number">230</span>), <span class="number">15</span>, <span class="number">15</span>, paint);<span class="comment">// 绘制圆角矩形</span></span><br><span class="line">        canvas.drawOval(<span class="keyword">new</span> <span class="title class_">RectF</span>(<span class="number">10</span>, <span class="number">240</span>, <span class="number">70</span>, <span class="number">270</span>), paint);         <span class="comment">// 绘制椭圆</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个Path对象，封闭成一个三角形。</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">        path1.moveTo(<span class="number">10</span>, <span class="number">340</span>);</span><br><span class="line">        path1.lineTo(<span class="number">70</span>, <span class="number">340</span>);</span><br><span class="line">        path1.lineTo(<span class="number">40</span>, <span class="number">290</span>);</span><br><span class="line">        path1.close();</span><br><span class="line">        canvas.drawPath(path1, paint);<span class="comment">// 根据Path进行绘制，绘制三角形</span></span><br><span class="line">        <span class="comment">// 定义一个Path对象，封闭成一个五角形。</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">        path2.moveTo(<span class="number">26</span>, <span class="number">360</span>);</span><br><span class="line">        path2.lineTo(<span class="number">54</span>, <span class="number">360</span>);</span><br><span class="line">        path2.lineTo(<span class="number">70</span>, <span class="number">392</span>);</span><br><span class="line">        path2.lineTo(<span class="number">40</span>, <span class="number">420</span>);</span><br><span class="line">        path2.lineTo(<span class="number">10</span>, <span class="number">392</span>);</span><br><span class="line">        path2.close();</span><br><span class="line">        canvas.drawPath(path2, paint);<span class="comment">// 根据Path进行绘制，绘制五角形</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------设置填充风格后绘制----------</span></span><br><span class="line">        paint.setStyle(Paint.Style.FILL);</span><br><span class="line">        paint.setColor(Color.RED);</span><br><span class="line">        canvas.drawCircle(<span class="number">120</span>, <span class="number">40</span>, <span class="number">30</span>, paint);              <span class="comment">//绘制圆</span></span><br><span class="line">        canvas.drawRect(<span class="number">90</span>, <span class="number">80</span>, <span class="number">150</span>, <span class="number">140</span>, paint);        <span class="comment">// 绘制正方形</span></span><br><span class="line">        canvas.drawRect(<span class="number">90</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">190</span>, paint);        <span class="comment">// 绘制矩形</span></span><br><span class="line">        canvas.drawRoundRect(<span class="keyword">new</span> <span class="title class_">RectF</span>(<span class="number">90</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">230</span>), <span class="number">15</span>, <span class="number">15</span>, paint); <span class="comment">// 绘制圆角矩形</span></span><br><span class="line">        canvas.drawOval(<span class="keyword">new</span> <span class="title class_">RectF</span>(<span class="number">90</span>, <span class="number">240</span>, <span class="number">150</span>, <span class="number">270</span>), paint);        <span class="comment">// 绘制椭圆</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">        path3.moveTo(<span class="number">90</span>, <span class="number">340</span>);</span><br><span class="line">        path3.lineTo(<span class="number">150</span>, <span class="number">340</span>);</span><br><span class="line">        path3.lineTo(<span class="number">120</span>, <span class="number">290</span>);</span><br><span class="line">        path3.close();</span><br><span class="line">        canvas.drawPath(path3, paint);        <span class="comment">// 绘制三角形</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">        path4.moveTo(<span class="number">106</span>, <span class="number">360</span>);</span><br><span class="line">        path4.lineTo(<span class="number">134</span>, <span class="number">360</span>);</span><br><span class="line">        path4.lineTo(<span class="number">150</span>, <span class="number">392</span>);</span><br><span class="line">        path4.lineTo(<span class="number">120</span>, <span class="number">420</span>);</span><br><span class="line">        path4.lineTo(<span class="number">90</span>, <span class="number">392</span>);</span><br><span class="line">        path4.close();</span><br><span class="line">        canvas.drawPath(path4, paint);         <span class="comment">// 绘制五角形</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------设置渐变器后绘制----------</span></span><br><span class="line">        <span class="comment">// 为Paint设置渐变器</span></span><br><span class="line">        <span class="type">Shader</span> <span class="variable">mShader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;</span><br><span class="line">                Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#125;, <span class="literal">null</span>,</span><br><span class="line">                Shader.TileMode.REPEAT);</span><br><span class="line">        paint.setShader(mShader);</span><br><span class="line">        <span class="comment">// 设置阴影</span></span><br><span class="line">        paint.setShadowLayer(<span class="number">25</span>, <span class="number">10</span>, <span class="number">10</span>, Color.GRAY);</span><br><span class="line"></span><br><span class="line">        canvas.drawCircle(<span class="number">200</span>, <span class="number">40</span>, <span class="number">30</span>, paint);<span class="comment">// 绘制圆形</span></span><br><span class="line">        canvas.drawRect(<span class="number">170</span>, <span class="number">80</span>, <span class="number">230</span>, <span class="number">140</span>, paint);<span class="comment">// 绘制正方形</span></span><br><span class="line">        canvas.drawRect(<span class="number">170</span>, <span class="number">150</span>, <span class="number">230</span>, <span class="number">190</span>, paint);<span class="comment">// 绘制矩形</span></span><br><span class="line">        canvas.drawRoundRect(<span class="keyword">new</span> <span class="title class_">RectF</span>(<span class="number">170</span>, <span class="number">200</span>, <span class="number">230</span>, <span class="number">230</span>), <span class="number">15</span>, <span class="number">15</span>, paint);<span class="comment">// 绘制圆角矩形</span></span><br><span class="line">        canvas.drawOval(<span class="keyword">new</span> <span class="title class_">RectF</span>(<span class="number">170</span>, <span class="number">240</span>, <span class="number">230</span>, <span class="number">270</span>), paint);<span class="comment">// 绘制椭圆</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">        path5.moveTo(<span class="number">170</span>, <span class="number">340</span>);</span><br><span class="line">        path5.lineTo(<span class="number">230</span>, <span class="number">340</span>);</span><br><span class="line">        path5.lineTo(<span class="number">200</span>, <span class="number">290</span>);</span><br><span class="line">        path5.close();</span><br><span class="line">        canvas.drawPath(path5, paint);<span class="comment">// 根据Path进行绘制，绘制三角形</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">        path6.moveTo(<span class="number">186</span>, <span class="number">360</span>);</span><br><span class="line">        path6.lineTo(<span class="number">214</span>, <span class="number">360</span>);</span><br><span class="line">        path6.lineTo(<span class="number">230</span>, <span class="number">392</span>);</span><br><span class="line">        path6.lineTo(<span class="number">200</span>, <span class="number">420</span>);</span><br><span class="line">        path6.lineTo(<span class="number">170</span>, <span class="number">392</span>);</span><br><span class="line">        path6.close();</span><br><span class="line">        canvas.drawPath(path6, paint);<span class="comment">// 根据Path进行绘制，绘制五角形</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------设置字符大小后绘制字符串----------</span></span><br><span class="line">        paint.setTextSize(<span class="number">24</span>);</span><br><span class="line">        paint.setShader(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//        paint.clearShadowLayer();</span></span><br><span class="line">        <span class="comment">// 绘制字符串</span></span><br><span class="line">        canvas.drawText(<span class="string">&quot;圆形&quot;</span>, <span class="number">240</span>, <span class="number">50</span>, paint);</span><br><span class="line">        canvas.drawText(<span class="string">&quot;正方形&quot;</span>, <span class="number">240</span>, <span class="number">120</span>,paint);</span><br><span class="line">        canvas.drawText(<span class="string">&quot;长方形&quot;</span>, <span class="number">240</span>, <span class="number">175</span>,paint);</span><br><span class="line">        canvas.drawText(<span class="string">&quot;圆角矩形&quot;</span>, <span class="number">230</span>,<span class="number">220</span>, paint);</span><br><span class="line">        canvas.drawText(<span class="string">&quot;椭圆形&quot;</span>, <span class="number">240</span>, <span class="number">260</span>,paint);</span><br><span class="line">        canvas.drawText(<span class="string">&quot;三角形&quot;</span>, <span class="number">240</span>, <span class="number">325</span>, paint);</span><br><span class="line">        canvas.drawText(<span class="string">&quot;五角形&quot;</span>, <span class="number">240</span>, <span class="number">390</span>, paint);</span><br><span class="line">        <span class="comment">//绘制图片</span></span><br><span class="line">        canvas.drawBitmap(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher), <span class="number">500</span>, <span class="number">150</span>, paint);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/1%E7%94%BB%E5%9B%BE%E5%85%A5%E9%97%A8.png" alt="1"></p><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p>遇到的错误情况记录如下：</p><h2 id="Blur-radius-out-of-0-25-pixel-bound"><a href="#Blur-radius-out-of-0-25-pixel-bound" class="headerlink" title="Blur radius out of 0-25 pixel bound"></a><a href="http://stackoverflow.com/questions/23048567/android-signal-11-rs-cpp-error-blur-radius-out-of-0-25-pixel-bound">Blur radius out of 0-25 pixel bound</a></h2><p>在Canvas上添加文本。使用一个drawText的时候没有问题，但是使用多个时就报错:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/rsC++: RS CPP error: Blur radius out of <span class="number">0</span>-<span class="number">25</span> pixel bound</span><br><span class="line">E/rsC++: RS CPP <span class="title function_">error</span> <span class="params">(masked by previous error)</span>: Allocation creation failed</span><br><span class="line">E/rsC++: RS CPP <span class="title function_">error</span> <span class="params">(masked by previous error)</span>: Allocation creation failed</span><br><span class="line">E/rsC++: RS CPP <span class="title function_">error</span> <span class="params">(masked by previous error)</span>: Blur radius out of <span class="number">0</span>-<span class="number">25</span> pixel bound</span><br></pre></td></tr></table></figure><p>错误代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paint.setShadowLayer(<span class="number">45</span>, <span class="number">10</span>, <span class="number">10</span>, Color.GRAY);</span><br></pre></td></tr></table></figure><p>设置Text的阴影层半径应在<strong>0~25px</strong><br>所以在绘制字符串时先<code>paint.clearShadowLayer();</code>清理阴影层或者修改半径<code>paint.setShadowLayer(25, 10, 10, Color.GRAY);</code>即可。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>了解Android的常用的画图API</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;p&gt;参考&lt;a href=&quot;http://blog.csdn.net/u012637501/article/details/43484333&quot;&gt;Android绘图深度解析&lt;/a&gt;这篇博客，通过例子来了解Android画图过程：继承View组件→重写onDraw(canvas)方法，相关类和接口有：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Drawable&lt;/td&gt;
&lt;td&gt;绘图结果表现出来的接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitmap&lt;/td&gt;
&lt;td&gt;可以来自资源或文件，也可以在程序中创建，实际上的功能相当于图片的存储空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Canvas&lt;/td&gt;
&lt;td&gt;代表了”依附”于指定View的画布，通过Canvas类的成员方法能够实现绘制各种图形&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Paint&lt;/td&gt;
&lt;td&gt;代表了Canvas上的画笔，主要用于设置绘制风格，画笔颜色，粗细，填充风格等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;代表任意多条直线连接而成的任意图形，&lt;code&gt;canvas.drawPath(path,paint)&lt;/code&gt;来绘制出任意形状的图形，另外通过PathEffect定义绘制路径图形效果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shader&lt;/td&gt;
&lt;td&gt;定义渐变填充，包含LinearGradient、RadialGradient和 SweepGradient&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Android基础" scheme="http://xiaoyaolml.github.io/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Android" scheme="http://xiaoyaolml.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Sublime 与 Markdown</title>
    <link href="http://xiaoyaolml.github.io/2016/03/12/Sublime%E4%B8%8EMarkdown/"/>
    <id>http://xiaoyaolml.github.io/2016/03/12/Sublime%E4%B8%8EMarkdown/</id>
    <published>2016-03-12T06:47:51.000Z</published>
    <updated>2016-05-28T22:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起"><a href="#起" class="headerlink" title="起"></a>起</h1><p>用Markdown来写博客，得选个合适的编辑器，找了网上的资料，看了<a href="http://www.zhihu.com/question/19637157">用Markdown写作用什么文本编辑器？</a>和<a href="http://www.williamlong.info/archives/4319.html">好用的Markdown编辑器一览</a>两篇内容，发现之前用的Sublime编辑器装装插件也能用，于是就找资料，参照<a href="http://www.jianshu.com/p/aa30cc25c91b">Sublime插件：Markdown篇</a>的内容安装配置了一下。</p><span id="more"></span><h1 id="承"><a href="#承" class="headerlink" title="承"></a>承</h1><p>把整个操作涉及到的常用快捷键总结如下：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>Ctrl+Shift+P</td><td>打开Package Control来安装插件</td><td></td></tr><tr><td>Ctrl+B</td><td>md文件生成html文件</td><td>MarkdownPreview插件</td></tr><tr><td>Ctrl+Alt+O</td><td>浏览器中实时预览</td><td>OmniMarkupPreviwer插件</td></tr><tr><td>Shitf+Tab</td><td>快速生成表格  <a href="http://upload-images.jianshu.io/upload_images/26219-256230846b591b50.gif">预览效果</a></td><td>TabEditor插件</td></tr></tbody></table><p>另外补充几个用得比较多的快捷键：</p><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+D</td><td>选择单词</td></tr><tr><td>Ctrl+L</td><td>选择一行</td></tr><tr><td>Ctrl+X</td><td>删除当前行</td></tr><tr><td>Ctrl+Shift+上下键</td><td>上下移动一行</td></tr><tr><td>Ctrl+F</td><td>查找内容</td></tr><tr><td>Ctrl+&#x2F;</td><td>注释行</td></tr><tr><td>Shift+F11</td><td>全屏</td></tr><tr><td>Ctrl+K+B</td><td>侧边栏开关</td></tr></tbody></table><p>关于Sublime Text更多的内容可以去<a href="http://www.jianshu.com/p/d1b9a64e2e37">Sublime Text：学习资源篇</a>看看。</p><h1 id="转"><a href="#转" class="headerlink" title="转"></a>转</h1><p>上手了编辑器之后，还得对markdown语法有一点了解，<a href="http://xianbai.me/learn-md/">Learning-Markdown (Markdown 入门参考)</a>和<a href="http://wowubuntu.com/markdown/index.html">Markdown 语法说明 (简体中文版)</a>这两份文档可以看看，还有这个<a href="http://daringfireball.net/projects/markdown/dingus">markdown 在线练习</a>网站可以练练手，不过我是直接在sublime中边写边练习。</p><p>常用的几个语法内容如下：</p><h2 id="1-标题样式"><a href="#1-标题样式" class="headerlink" title="1.标题样式"></a>1.标题样式</h2><ul><li>大标题：<code># 大标题</code> 最大一级标题</li><li>二级标题：<code>## 二级标题</code></li><li>小标题：<code>### 小标题</code> 最小六级标题</li></ul><h2 id="2-文本样式"><a href="#2-文本样式" class="headerlink" title="2.文本样式"></a>2.文本样式</h2><h3 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h3><ol><li>无序列表：<code>* + -</code></li><li>有序列表：<code>1. 2. </code></li></ol><h3 id="2-2-内容"><a href="#2-2-内容" class="headerlink" title="2.2 内容"></a>2.2 内容</h3><ul><li><strong>粗体</strong>：<code>**粗体**</code></li><li><em>斜体</em>： <code>*斜体*</code></li></ul><blockquote><p>引用：<code>&gt;引用</code></p><blockquote><p>嵌套引用：<code>&gt;&gt;嵌套引用</code></p></blockquote><p><strong>引用中可以使用其他语法</strong></p></blockquote><p>分割线：<code>---</code></p><hr><h2 id="3-代码样式"><a href="#3-代码样式" class="headerlink" title="3.代码样式"></a>3.代码样式</h2><p>内嵌代码：<code>print(&#39;Hello Markdown.&#39;)</code><br>代码块：</p><pre><code>print(&#39;开头Tab键，表示一行代码&#39;)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-超链接"><a href="#4-超链接" class="headerlink" title="4.超链接"></a>4.超链接</h2><p>文字链接：<br><a href="https://xiaoyaolml.github.io/">我的博客</a></p><p>图片链接：</p><p><img src="https://avatars1.githubusercontent.com/u/8487928?v=3&s=460" alt="我的头像" title="我的头像"></p><h1 id="合"><a href="#合" class="headerlink" title="合"></a>合</h1><p>开始体验Markdown+Sublime书写之旅吧。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起&quot;&gt;&lt;a href=&quot;#起&quot; class=&quot;headerlink&quot; title=&quot;起&quot;&gt;&lt;/a&gt;起&lt;/h1&gt;&lt;p&gt;用Markdown来写博客，得选个合适的编辑器，找了网上的资料，看了&lt;a href=&quot;http://www.zhihu.com/question/19637157&quot;&gt;用Markdown写作用什么文本编辑器？&lt;/a&gt;和&lt;a href=&quot;http://www.williamlong.info/archives/4319.html&quot;&gt;好用的Markdown编辑器一览&lt;/a&gt;两篇内容，发现之前用的Sublime编辑器装装插件也能用，于是就找资料，参照&lt;a href=&quot;http://www.jianshu.com/p/aa30cc25c91b&quot;&gt;Sublime插件：Markdown篇&lt;/a&gt;的内容安装配置了一下。&lt;/p&gt;</summary>
    
    
    
    <category term="编辑器" scheme="http://xiaoyaolml.github.io/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
    <category term="Sublime" scheme="http://xiaoyaolml.github.io/tags/Sublime/"/>
    
    <category term="Markdown" scheme="http://xiaoyaolml.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>上手Android Studio之二(基本使用)</title>
    <link href="http://xiaoyaolml.github.io/2016/01/29/%E4%B8%8A%E6%89%8BAndroid-Studio%E4%B9%8B%E4%BA%8C-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://xiaoyaolml.github.io/2016/01/29/%E4%B8%8A%E6%89%8BAndroid-Studio%E4%B9%8B%E4%BA%8C-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2016-01-29T04:00:00.000Z</published>
    <updated>2016-05-29T16:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过以上一篇<a href="http://xiaoyaolml.github.io/2016/01/22/%E4%B8%8A%E6%89%8BAndroid%20Studio%E4%B9%8B%E4%B8%80%28%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%29/">上手Android Studio之一(基本配置)</a>折腾，接下来咱就来看看用Android Studio做开发的基本使用。</p><span id="more"></span><h1 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h1><p>咱先来看看项目工具窗口（The Project Tool Window），Project主要有三种模式：Project，Packages和Android。Android Studio在默认情况下将模式设置为Android。Project工具窗口呈现你项目中的所有包，目录和文件的概览。如果在项目工具窗口中右击，将会显示一个上下文菜单。此处有三个重要的菜单项：复制路径，文件路径和在资源管理器中显示。点击Copy Path复制操作系统的绝对路径到剪贴板。点击File Path以倒序方式显示目录堆栈，点击任何一个目录都将在操作系统中打开他们。点击 Show in Explorer将会在你的操作系统中打开一个新窗口来显示文件。如下图所示，经过之前的折腾，咱的工程Project主要包括AS生成的工程配置文件，app模块文件，build生成文件，gradle构建工具文件和第三方类库的libraries模块，还有外部依赖库文件。</p><p><img src="http://img.blog.csdn.net/20160205114004416" alt="Project目录结构" title="Project目录结构"></p><p>点来看看app模块的目录结构，如下图所示，主要包括构建目录，依赖包，测试文件夹，主文件夹和一些gradle配置的文件，其中主文件中包含java代码文件和资源文件夹。</p><p><img src="http://img.blog.csdn.net/20160205114009213" alt="Module目录结构" title="Module目录结构"></p><h1 id="使用调试"><a href="#使用调试" class="headerlink" title="使用调试"></a>使用调试</h1><p>以一个简单的例子记录一下调试的过程，如下图所示，首先设置3个断点（点击红点位置添加或取消断点），然后点击Debug模式运行，程序正常运行至断点出就进入调试状态了，可以看到调试面板，调试面板中主要包含：  </p><ol><li>程序的方法调用栈区，显示了程序执行到断点处所调用过的所有方法。  </li><li>一些调试按钮，step over：一步步往下执行，如果当前行有方法调用，这个方法将被执行完毕返回，然后到下一行；step into：看到自定义方法往里走（不会进入官方类库的方法）；force step into：能进入任何方法；step out：跳出方法继续走；run to cursor：很快执行到下一个断点的位置。  </li><li>变量观察区，在Variables面版中观察变量，如果太多了，那么可以在Watches面板点击添加要观察的变量，还可以设置变量的值</li></ol><p><img src="http://img.blog.csdn.net/20160205114014162" alt="调试前" title="调试前"></p><p><img src="http://img.blog.csdn.net/20160205114018728" alt="调试中" title="调试中"></p><p>当然还可以查看断点相关信息，跨断点调试等。</p><h1 id="使用Apk签名"><a href="#使用Apk签名" class="headerlink" title="使用Apk签名"></a>使用Apk签名</h1><p>选择Build→GenerateSigned APK，在弹出窗口选择Create new进入新建Key Store文件，把信息填完之后点击OK跳回到Generate Signed APK 窗口，然后输入密码、别名等信息后点击Next，最后点击Finish，完成之后会在app目录下生产签名后的app-release.apk文件。整个过程如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205114026244" alt="Build选项" title="Build选项"></p><p><img src="http://img.blog.csdn.net/20160205114032491" alt="New Key Store" title="New Key Store"></p><p><img src="http://img.blog.csdn.net/20160205114041303" alt="Generate Signed APK" title="Generate Signed APK"></p><p><img src="http://img.blog.csdn.net/20160205114051288" alt="完成" title="完成"></p><h1 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h1><p>首先要确保本地安装了Git工具，接下来就是在AS中进行配置Git了，如下图所示，主要是配置一下git 的路径，然后点击Test按钮，成功的话出现Git executed successfully的窗口。</p><p><img src="http://img.blog.csdn.net/20160205114059428" alt="Git配置" title="Git配置"></p><p>接下来配置GitHub账户，主要是填写一下账户密码，然后点击Test按钮，成功的话出现Success的窗口。</p><p><img src="http://img.blog.csdn.net/20160205114106620" alt="GitHub配置" title="GitHub配置"></p><p>完成以上配置之后，咱就可以将项目上传到GitHub上了，操作步骤如下：</p><ul><li>点击VCS→Enable Version Control Integration，在弹出窗口选择Git，点击OK，如下图所示；</li></ul><p><img src="http://img.blog.csdn.net/20160205114114444" alt="Enable Version Control Integration" title="Enable Version Control Integration"></p><p><img src="http://img.blog.csdn.net/20160205114121652" alt="选择Git" title="选择Git"></p><ul><li>点击VCS→Import into Version Control→ShareProject on Github，在弹出窗口对导入到Github的项目进行描述，点击Share后再弹出窗口填写Commit Message，点击OK即可，过一小会弹出成功的提示，过程如下图所示：</li></ul><p><img src="http://img.blog.csdn.net/20160205114128538" alt="Share Project on Github" title="Share Project on Github"></p><p><img src="http://img.blog.csdn.net/20160205114134964" alt="New Repository" title="New Repository"></p><p><img src="http://img.blog.csdn.net/20160205114141475" alt="Add Files For Inital Commit" title="Add Files For Inital Commit"></p><p><img src="http://img.blog.csdn.net/20160205114147605" alt="成功提示" title="成功提示"></p><p>到此，咱就把项目上传到GitHub上了，点击HelloWorld超链接可以跳到GitHub项目主页，如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205114153918" alt="GitHub项目主页" title="GitHub项目主页"></p><p>接下来，咱来做几个测试，先新增一个TestNewClass类，此时会弹出提示，如下图所示：</p><p><img src="http://img.blog.csdn.net/20160205114200043" alt="Add Fileto Git" title="Add Fileto Git"></p><p>先选Yes然后就生成了这个类，接着再新增一个TestNoAddClass类，仍会跳出该提示，这次咱选No，然后咱发现之前的MainActivity的代码空行太多了就删掉几行，最后改动后的结果如下图所示：</p><p><img src="http://img.blog.csdn.net/20160205114205851" alt="改动后的结果" title="改动后的结果"></p><p>咱看到这三个文件的颜色变了，在版本控制面板也可以清晰的看到改变的操作，如下图所示：</p><p><img src="http://img.blog.csdn.net/20160205114211668" alt="版本控制面板" title="版本控制面板"></p><p>文件颜色对应的状态关系如下：</p><table><thead><tr><th>颜色</th><th>状态</th></tr></thead><tbody><tr><td>红色</td><td>没有add的新文件</td></tr><tr><td>绿色</td><td>add过但没有commit的文件</td></tr><tr><td>蓝色</td><td>修改过的文件</td></tr></tbody></table><p>Add红色的文件，选择文件点击右键，Git→Add，操作如下图所示，此时文件变绿色了。</p><p><img src="http://img.blog.csdn.net/20160205114217585" alt="Git Add" title="Git Add"></p><p>上传代码，如下图所示，填写Commit Message后，选择Commit and Push。提交之后可能会弹出警告，继续Commit即可。</p><p><img src="http://img.blog.csdn.net/20160205114224200" alt="Git Commit" title="Git Commit"></p><p>接下来就是Push了，如下图所示：</p><p><img src="http://img.blog.csdn.net/20160205114233038" alt="Git Push" title="Git Push"></p><p>完成操作之后就可以在GitHub上看到所做的修改了，如下图所示：</p><p><img src="http://img.blog.csdn.net/20160205114237825" alt="GitHub页" title="GitHub页"></p><p>到此，本地代码提交到github的Add、Commit和Push都使用过了，现在来试试从Github下拉到本地的Pull，正好GitHub项目主页上也提示了要添加一个README文件，咱就接着折腾吧。<br>先在GithHub上创建README.md如下图所示：</p><p><img src="http://img.blog.csdn.net/20160205114243366" alt="填写内容" title="填写内容"></p><p><img src="http://img.blog.csdn.net/20160206121203523" alt="提交修改" title="提交修改"></p><p>提交完后，可以看到如下图所示，新增的内容已经加到项目里了。</p><p><img src="http://img.blog.csdn.net/20160205114304523" alt="GitHub页" title="GitHub页"></p><p>接下来就是在本地更新项目，操作如下图所示：</p><p><img src="http://img.blog.csdn.net/20160205114309138" alt="Git Pull" title="Git Pull"></p><p>完了之后就会把README.md下拉到本地了，可以在版本控制面板上查看提示，如下图所示：</p><p><img src="http://img.blog.csdn.net/20160205114313460" alt="版本控制面板" title="版本控制面板"></p><p>到此，咱就把这个流程都过了一遍了。</p><h1 id="使用Genymotion"><a href="#使用Genymotion" class="headerlink" title="使用Genymotion"></a>使用Genymotion</h1><p>一般都是直接使用真机开发的，不过有的时候可能需要用模拟器来进行演示，咱选用的是号称<code>the fastest emulator in the world</code>的Genymotion模拟器。在<a href="http://xiaoyaolml.github.io/2016/01/22/%E4%B8%8A%E6%89%8BAndroid%20Studio%E4%B9%8B%E4%B8%80%28%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%29/">上一篇的内容</a>中，咱添加了Genymotion插件，这个插件得配合Genymotion模拟器软件来使用。首先，需要在本地安装这个Genymotion模拟器。然后是在AS中做一下配置，如下图所示，设置选择路径为Genymotion模拟器安装的根目录即可。现在就可以使用Android模拟器运行Android App了。</p><p><img src="http://img.blog.csdn.net/20160205114317716" alt="Genymotion配置" title="Genymotion配置"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="http://blog.csdn.net/yanbober/article/details/45306483">Android Studio入门到精通</a></li><li><a href="http://blog.csdn.net/column/details/zsl-androidstudio.html">Android Studio 权威教程</a></li><li><a href="http://ask.android-studio.org/?/explore/category-studio">Android Studio使用教程</a></li><li><a href="http://ask.android-studio.org/?/explore/category-gradle">Gradle 使用教程</a></li><li><a href="http://www.2cto.com/kf/201412/364133.html">Android Studio Share Project On Github</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;经过以上一篇&lt;a href=&quot;http://xiaoyaolml.github.io/2016/01/22/%E4%B8%8A%E6%89%8BAndroid%20Studio%E4%B9%8B%E4%B8%80%28%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%29/&quot;&gt;上手Android Studio之一(基本配置)&lt;/a&gt;折腾，接下来咱就来看看用Android Studio做开发的基本使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Android基础" scheme="http://xiaoyaolml.github.io/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Android" scheme="http://xiaoyaolml.github.io/tags/Android/"/>
    
    <category term="Android Studio" scheme="http://xiaoyaolml.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>上手Android Studio之一(基本配置)</title>
    <link href="http://xiaoyaolml.github.io/2016/01/22/%E4%B8%8A%E6%89%8BAndroid-Studio%E4%B9%8B%E4%B8%80-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://xiaoyaolml.github.io/2016/01/22/%E4%B8%8A%E6%89%8BAndroid-Studio%E4%B9%8B%E4%B8%80-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2016-01-22T04:00:00.000Z</published>
    <updated>2016-05-28T22:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要内容包括：Android Studio 的基本配置、常用插件、Gradle构建系统初步、第三方库导入等。</p><span id="more"></span><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="配置IDE主题"><a href="#配置IDE主题" class="headerlink" title="配置IDE主题"></a>配置IDE主题</h2><p>接上一篇<a href="http://xiaoyaolml.github.io/2016/01/15/%E4%BB%8EAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%A7%8B/">从Android开发环境搭建开始</a>，其实，咱在安装AS的留了个坑，那就是关于主题的配置，如果是默认安装，主题是灰白色的，而咱选了一个暗黑系的Darcula主题。关于主题设置需要打开Settings窗口，操作如下：点击<code>设置</code>图标-&gt;Appearance-&gt;选择Theme-&gt;点击<code>Apply</code>，主题就设置好了。</p><p><img src="http://img.blog.csdn.net/20160205113849162" alt="设置IDE主题" title="设置IDE主题"></p><h2 id="配置代码主题"><a href="#配置代码主题" class="headerlink" title="配置代码主题"></a>配置代码主题</h2><p>默认的几个主题咱没办法修改，需要自定义一个主题才行，仍旧是在Settings窗口中，在Editor-&gt;Colors&amp; Fonts栏，先选择Darcula然后再点击Save As，在弹出窗口Name文本框里自定义Darcula copy的主题，如下图所示。点击OK在点击Apply后自定义主题就设置好了。</p><p><img src="http://img.blog.csdn.net/20160205113856039" alt="自定义主题" title="自定义主题"></p><p>然后就可以配置代码主题了。咱做的配置如下：</p><ol><li><p>代码字体、大小、间距<br>在Editor→Colors&amp; Font→Font栏：选择Scheme为自定义的Darculacopy，选择Primaryfont 字体为Monospaced，选择Size大小为20，选择Line spacing间距为1.0。</p></li><li><p>自动导包<br>在Editot→General→Auto Import栏：勾上“Optimize imports on the fly”和“Add unambiguous imports on the fly”。</p></li><li><p>显示行号<br>在Editot→General→Appearance栏，勾上“Show line numbers”。</p></li><li><p>代码提示不区分大小写<br>在Editor→General→Code Completion，将”Case sensitive completion”设置为None。</p></li></ol><h2 id="配置Logcat颜色"><a href="#配置Logcat颜色" class="headerlink" title="配置Logcat颜色"></a>配置Logcat颜色</h2><p>默认AS的logcat只有Error和Assert是红色的。做完配置后如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205113901584" alt="Logcat效果预览" title="Logcat效果预览"></p><p>具体操作步骤如下：<br>在Editor→Colors&amp; Fonts→Android Logcat栏，依次选择Assert、Debug、Error等选项操作，然后将Useinherited attributes 去掉勾选，再双击Foreground后面的颜色框去选择颜色，颜色选择参考如下表所示。最后点击Apply即可。</p><table><thead><tr><th>Log级别</th><th>颜色值</th></tr></thead><tbody><tr><td>VERBOSE</td><td>BBBBBB</td></tr><tr><td>DEBUG</td><td>0070BB</td></tr><tr><td>INFO</td><td>48BB31</td></tr><tr><td>WARN</td><td>BBBB23</td></tr><tr><td>ERROR</td><td>FF0006</td></tr><tr><td>ASSERT</td><td>8F0005</td></tr></tbody></table><h2 id="统一文件编码"><a href="#统一文件编码" class="headerlink" title="统一文件编码"></a>统一文件编码</h2><p>统一文件编码为UTF-8。在Editor→File Encodings栏，分别设置IDE Encoding位UTF-8，设置ProjectEncoding为UTF-8，设置properties file的编码为UTF-8，并勾上<code>Transparent native-to-asciiconversion</code>，如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205113906303" alt="设置编码" title="设置编码"></p><h2 id="导出-x2F-导入配置"><a href="#导出-x2F-导入配置" class="headerlink" title="导出&#x2F;导入配置"></a>导出&#x2F;导入配置</h2><p>做了这么多配置，接下来就是导出配置了，方便以后直接导入配置，以免遇到意外情况咱又得重新配置了啊。点击菜单栏的File→Export Settings，弹出导出设置窗口，选一下导出路径，默认把所以内容都导出到settings.jar。</p><p><img src="http://img.blog.csdn.net/20160205113910462" alt="导出设置" title="导出设置"></p><p>导入设置就更简单了，点击菜单栏的FileàImport Settings，弹出导出设置窗口，选择要导入的settings.jar文件，点击OK即可。</p><p><img src="http://img.blog.csdn.net/20160205113914243" alt="导入设置" title="导入设置"></p><h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><h2 id="如何添加插件"><a href="#如何添加插件" class="headerlink" title="如何添加插件"></a>如何添加插件</h2><p>关于插件的操作都是在Settings→Plugins栏里，如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205113922350" alt="Plugins设置" title="Plugins设置"></p><p>可以看到有三种安装插件的方式，一个是<code>JetBrains plugin</code>官方插件，一个是<code>Browse repositories</code>来自仓库的插件，最后一个是离线安装本地插件。其中前两种插件的安装方式差不多，咱以安装Genymotion为例记录一下操作流程。点击Browse repositories弹出一个新窗口，在搜索栏中输入Genymotion搜索，在搜索结果右侧出现Install plugin的绿色安装，点击即可联网安装该插件，完成之后会要求重启AS，如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205113926428" alt="安装Genymotion插件" title="安装Genymotion插件"></p><p>另一种本地安装的方式，点击Install plugin from disk后选择下载好的插件包即可安装，完成之后同样需要重启AS使得插件生效。</p><h2 id="几个常用插件"><a href="#几个常用插件" class="headerlink" title="几个常用插件"></a>几个常用插件</h2><p>除了前面举例子安装的Genymotion插件外，咱再列举几个常用的插件。如何使用就不展开了，后面涉及到了再说。</p><ol><li><p>GsonFormat。<br>生成Gson相应的实体类，项目地址：<a href="https://github.com/zzz40500/GsonFormat">https://github.com/zzz40500/GsonFormat</a></p></li><li><p>AndroidParcelable Code Generator<br>parcelable  序列化代码补全，项目地址：<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin">https://github.com/mcharmas/android-parcelable-intellij-plugin</a></p></li><li><p>Android MaterialDesign Icon Generator<br>material-design-icon资源生成器，项目地址：<a href="https://github.com/konifar/android-material-design-icon-generator-plugin">https://github.com/konifar/android-material-design-icon-generator-plugin</a></p></li><li><p>SelectorChapekfor Android<br>根据资源自动生成相应的selector，免得对selector文件复制粘贴了。项目地址：<a href="https://github.com/inmite/android-selector-chapek">https://github.com/inmite/android-selector-chapek</a></p></li><li><p>ButterKnifeZelezny<br>快速生成butterknife注入代码，项目地址：<a href="https://github.com/avast/android-butterknife-zelezny">https://github.com/avast/android-butterknife-zelezny</a></p></li><li><p>idea-markdown<br>markdown插件，项目地址：<a href="https://github.com/nicoulaj/idea-markdown">https://github.com/nicoulaj/idea-markdown</a></p></li><li><p>Codota<br>搜索代码的插件，项目地址：<a href="https://www.codota.com/">https://www.codota.com/</a></p></li><li><p>ADB Idea<br>通过该插件可以轻松完成以下操作而不用手动输入ADB命令。项目地址：<a href="https://github.com/pbreault/adb-idea">https://github.com/pbreault/adb-idea</a></p></li><li><p>Android DrawableImporter<br>Android Drawable Importer添加了一个在不同分辨率导入画板或缩放指定图像到定义分辨率的选项。这个插件加速了开发人员的画板工作。项目地址：<a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin">https://github.com/winterDroid/android-drawable-importer-intellij-plugin</a></p></li><li><p>Android HoloColors Generator<br>此插件会生成所有必要的可在项目中使用的相关的XML画板和样式资源。项目地址：<a href="https://github.com/jeromevdl/android-holo-colors-idea-plugin">https://github.com/jeromevdl/android-holo-colors-idea-plugin</a></p></li></ol><h1 id="Gradle构建系统初体验"><a href="#Gradle构建系统初体验" class="headerlink" title="Gradle构建系统初体验"></a>Gradle构建系统初体验</h1><p>Gradle 是以 Groovy 语言为基础，面向Java应用为主。基于DSL（领域特定语言）语法的自动化构建工具。Gradle通过提供说明性语言元素将说明性构建推到下一层。这些元素也提供build-by-convention支持Java、Groovy、OSGi、Web和Scala项目。而且，这个说明性语言是可扩展的。添加自己的新语言元素或提高现有的，从而提供简洁、易于维护和理解构建。</p><h2 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a>安装Gradle</h2><p>在咱<a href="http://xiaoyaolml.github.io/2016/01/15/%E4%BB%8EAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%A7%8B/">上一篇</a>测试开发环境的时候新建HelloWorld项目后会自动下载Gradle到C:\Users&lt;用户名&gt;.gradle\wrapper\dists目录，生成一个名为gradle-x.xx-all的文件夹。</p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>先来看看项目构建文件HelloWorld&#x2F;build.gradle，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build filewhere you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()                                       <span class="comment">// 声明仓库的源</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:1.3.0&#x27;</span> <span class="comment">// 声明gradle的版本</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here;they belong</span></span><br><span class="line">        <span class="comment">// in the individual modulebuild.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()                                   <span class="comment">// 所有项目的存储库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容主要包含：一是声明仓库的源，这里可以看到是指明的jcenter()，之前版本则是mavenCentral()，jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本，最后是所有项目的存储库。</p><p>再来看看模块构建文件HelloWorld&#x2F;app&#x2F;build.gradle，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">applyplugin: <span class="string">&#x27;com.android.application&#x27;</span>       <span class="comment">// 声明是Android程序</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span>                     <span class="comment">// 编译SDK的版本</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;23.0.1&quot;</span>               <span class="comment">// build tools的版本</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.leon.helloworld&quot;</span>  <span class="comment">// 应用的包名</span></span><br><span class="line">        minSdkVersion <span class="number">18</span>                     <span class="comment">// 最小SDK的版本</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span>                  <span class="comment">// 目标SDK的版本</span></span><br><span class="line">        versionCode <span class="number">1</span>                        <span class="comment">// 版本号</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span>                    <span class="comment">// 版本名称</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;                            <span class="comment">// 正式版配置</span></span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles <span class="title function_">getDefaultProguardFile</span><span class="params">(<span class="string">&#x27;proguard-android.txt&#x27;</span>)</span>, <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;                                <span class="comment">// 依赖配置</span></span><br><span class="line">    compile <span class="title function_">fileTree</span><span class="params">(dir: <span class="string">&#x27;libs&#x27;</span>, include: [<span class="string">&#x27;*.jar&#x27;</span>])</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.support:appcompat-v7:23.0.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在正式版配置中，minifyEnable false 是apk是否变小压缩apk的意思；proguardFiles这部分有两段，前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，免去了我们很多事，这个文件的目录在 &lt;sdk目录&gt;&#x2F;tools&#x2F;proguard&#x2F;proguard-android.txt，后一部分是我们项目里的自定义的混淆文件，就在 app&#x2F;proguard-rules.pro，在这个文件里你可以声明一些第三方依赖的一些混淆规则。最终混淆的结果是这两部分文件共同作用的。<br>在依赖配置中，一般有这三种依赖关系：模块依赖，远程二进制依赖和本地二进制依赖。上面内容中的依赖分别是本地依赖和远程依赖。</p><p>再来看看gradle项目设置配置文件HelloWorld&#x2F;settings.gradle，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include<span class="string">&#x27;:app&#x27;</span></span><br></pre></td></tr></table></figure><p>主要声明一些需要加入gradle的模块，本例中只有一个app模块，如果还有其他module都需要按照如上格式加进去。</p><p>最后来看看SDK&#x2F;NDK配置文件HelloWorld&#x2F;local.properties，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## This file is automatically generated by Android Studio.</span><br><span class="line"># Do not modify this file -- YOUR CHANGES WILL BE ERASED!</span><br><span class="line">#</span><br><span class="line"># This file must *NOT* be checked into Version Control Systems,</span><br><span class="line"># as it contains information specific to your local configuration.</span><br><span class="line">#</span><br><span class="line"># Location of the SDK. This is only used by Gradle.</span><br><span class="line"># For customization when using a Version Control System, please read the</span><br><span class="line"># header note.</span><br><span class="line">#Tue Jan 19 21:34:45 CST 2016</span><br><span class="line">sdk.dir=D\:\\Programs\\android-sdk</span><br></pre></td></tr></table></figure><p>主要是配置sdk和ndk的路径，本例中只有SDK的路径。<br>关于gradle的基础知识先到这里。</p><h1 id="导入第三方库"><a href="#导入第三方库" class="headerlink" title="导入第三方库"></a>导入第三方库</h1><p>主要提一下几个咱平时用到的导入方法。</p><h2 id="Gradle-直接添加法"><a href="#Gradle-直接添加法" class="headerlink" title="Gradle 直接添加法"></a>Gradle 直接添加法</h2><p>以图像加载库<a href="https://github.com/nostra13/Android-Universal-Image-Loader">Android-Universal-Image-Loader</a>为例，从官方指导上可以看到添加这个库需要在gradle依赖配置中添加一行代码即可，如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205113935740" alt="QuickSetup" title="QuickSetup"></p><p>同步一下gradle设置即可，如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205113942881" alt="添加远程依赖库" title="添加远程依赖库"></p><h2 id="jar-包直接导入法"><a href="#jar-包直接导入法" class="headerlink" title="jar 包直接导入法"></a>jar 包直接导入法</h2><p>以<a href="https://github.com/LuckyJayce/ViewPagerIndicator">ViewPagerIndicator</a>为例，下载完最新jar包，放到app&#x2F;libs目录，选中该库，鼠标右键，选择Add As Library，如下图所示，然后在弹出的Create Library窗口点击OK即可。</p><p><img src="http://img.blog.csdn.net/20160205113947447" alt="添加本地依赖库" title="添加本地依赖库"></p><p>完成之后，可以看到jar包多了个展开三角形，并且在app&#x2F;build.gradle下生成了一行代码compilefiles(‘libs&#x2F;ViewpagerIndicator_1.0.2.jar’)，如下图所示，所以还有另一种方法就是直接在app&#x2F;build.gradle文件中添加这一行代码即可。</p><p><img src="http://img.blog.csdn.net/20160205113951943" alt="添加成功" title="添加成功"></p><h2 id="so-库简单粗暴法"><a href="#so-库简单粗暴法" class="headerlink" title="so 库简单粗暴法"></a>so 库简单粗暴法</h2><p>直接在app&#x2F;src&#x2F;main目录下创建jniLibs目录，再将so文件拷贝到该目录内即可。</p><h2 id="部分开源库折腾法"><a href="#部分开源库折腾法" class="headerlink" title="部分开源库折腾法"></a>部分开源库折腾法</h2><p>以下拉刷新库<a href="https://github.com/chrisbanes/Android-PullToRefresh">Android-PullToRefresh</a>为例，先把项目下载到本地。<br>在咱自建的项目的根目录创建一个libraries目录，将Android-PullToRefresh-master中的library重名为pulltorefresh，放入新建的libraries目录下，在pulltorefresh中再创建build.gradle文件。如下图所示。</p><p><img src="http://img.blog.csdn.net/20160205113956678" alt="第三方类库结构" title="第三方类库结构"></p><p>其中build.gradle文件的内容与项目的gradle配置一致，具体参考project项目构建文件和app模块构建文件。本例的设置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;android-library&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;23.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">18</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            java.srcDirs = [<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">            resources.srcDirs = [<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">            aidl.srcDirs = [<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">            renderscript.srcDirs = [<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">            res.srcDirs = [<span class="string">&#x27;res&#x27;</span>]</span><br><span class="line">            assets.srcDirs = [<span class="string">&#x27;assets&#x27;</span>]</span><br><span class="line">            manifest.srcFile <span class="string">&#x27;AndroidManifest.xml&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是在gradle项目设置配置文件(HelloWorld&#x2F;settings.gradle)中引入这个类库模块。本例的设置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include<span class="string">&#x27;:app&#x27;</span>, <span class="string">&#x27;:libraries:pulltorefresh&#x27;</span></span><br></pre></td></tr></table></figure><p>最后在app模块构建文件中添加依赖项。本例的设置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile <span class="title function_">project</span><span class="params">(<span class="string">&#x27;:libraries:pulltorefresh&#x27;</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做完以上配置，同步一下Gradle即可。要说明的是，根据实际情况，该库在导入时遇到一个问题，即PullToRefreshWebView.java代码中FloatMath.floor函数报错，解决办法是直接将此函数修改成Math.floor替换即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要内容包括：Android Studio 的基本配置、常用插件、Gradle构建系统初步、第三方库导入等。&lt;/p&gt;</summary>
    
    
    
    <category term="Android基础" scheme="http://xiaoyaolml.github.io/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Android" scheme="http://xiaoyaolml.github.io/tags/Android/"/>
    
    <category term="Android Studio" scheme="http://xiaoyaolml.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>从Android开发环境搭建开始</title>
    <link href="http://xiaoyaolml.github.io/2016/01/15/%E4%BB%8EAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%A7%8B/"/>
    <id>http://xiaoyaolml.github.io/2016/01/15/%E4%BB%8EAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%A7%8B/</id>
    <published>2016-01-15T04:00:00.000Z</published>
    <updated>2016-05-28T21:05:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>咱从开发环境着手进行Android开发的记录。<br>首先需要安装Java开发工具包(JDK)这个必要组件。然后就是要下载和安装Android Studio以及 Android 软件开发工具包(SDK) 这些都是开发Android应用程序所必需的工具。注意，以下所有操作都是在Windows系统下完成。</p><span id="more"></span><h1 id="JAVA-开发环境"><a href="#JAVA-开发环境" class="headerlink" title="JAVA 开发环境"></a>JAVA 开发环境</h1><p>Android Studio 使用java编译环境构建，因此在开始使用Android Studio之前要确保你已经安装Java开发工具包（JDK）。</p><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>可以从<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">Oracle网站</a>上获取Java SE Development Kit 8 (jdk8)，勾选Accept License Agreement后，根据电脑的windows版本选择32位或者64位的JDK下载。（注意本内容的操作时间为2015.09.21，根据实际情况下载最新版本的JDK。）</p><p><img src="http://img.blog.csdn.net/20160121201945154" alt="JDK下载" title="JDK下载"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>找到安装文件然后双击执行。当安装开始，你将看到安装向导，在Windows系统下，JDK默认安装在C:\ProgramFiles\Java\目录下。要更改安装目录的位置，请单击Change按钮。建议安装JDK的目录的路径名中不包含空格。一直点击“下一步”，期间会弹出安装Java运行环境(JRE)，选择跟JDK安装位置相同的目录。如下图所示。</p><p><img src="http://img.blog.csdn.net/20160121201945154" alt="点击下一步" title="点击下一步"></p><p><img src="http://img.blog.csdn.net/20160121201200971" alt="安装JRE" title="安装JRE"></p><p>安装完成后，可以看到如下图所示的两个文件夹，分别为jdk1.8.0_60和jre1.8.0_60。</p><p><img src="http://img.blog.csdn.net/20160121201200971" alt="安装完成后的文件夹" title="安装完成后的文件夹"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>DK安装完成之后，需要配置JAVA_HOME到环境变量以便Android Studio找到JDK。具体操作过程如下：<br>我的电脑单击右键打开属性-&gt;单击高级系统设置选项。</p><p><img src="http://img.blog.csdn.net/20160121201216612" alt="Windows系统设置" title="Windows系统设置"></p><p>新建环境变量名JAVA_HOME，变量值为自己实际安装的jdk安装路径。</p><p><img src="http://img.blog.csdn.net/20160121201224268" alt="设置JAVA_HOME环境变量" title="设置JAVA_HOME环境变量"></p><p> 最后，还需要编辑PATH环境变量。如图1.6所示。将光标移动到变量值的最后面然后输入如下路径：<code>;%JAVA_HOME%\bin</code></p><p><img src="http://img.blog.csdn.net/20160121201229748" alt="设置PATH环境变量" title="设置PATH环境变量"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>cmd命令行窗口下运行java –version命令来查看当前java版本信息。</p><p><img src="http://img.blog.csdn.net/20160121201234472" alt="确认JDK安装成功" title="确认JDK安装成功"></p><h1 id="Android-Studio-开发环境"><a href="#Android-Studio-开发环境" class="headerlink" title="Android Studio 开发环境"></a>Android Studio 开发环境</h1><p>好了，有了上面的JDK环境之后，可以进行AndroidStudio安装配置了。</p><h2 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h2><p>可以从<a href="http://www.android-studio.org/">Android Studio中文社区官网</a>上获取最新版的Android Studio，注意安装包分为含SDK版本和不含SDK版本，咱就下载推荐的包含SDK的Android Studio。如下图所示（注意本内容的操作时间为2015.09.21，根据实际情况下载最新版本）</p><p><img src="http://img.blog.csdn.net/20160121201237608" alt="Android Studio下载" title="Android Studio下载"></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>找到安装文件然后双击执行。当安装开始，你将看到安装向导，一路点击Next按钮直到Android Studio和Android SDK都安装完成。</p><p><img src="http://img.blog.csdn.net/20160121201241378" alt="Android Studio安装" title="Android Studio安装"></p><p>安装完成后打开，看到如下图所示的窗口。</p><p><img src="http://img.blog.csdn.net/20160121201245327" alt="Android Studio完成安装" title="Android Studio完成安装"></p><p>每一次安装，都会显示这个界面。用以选择导入Android Studio的配置文件。<br>第一个选项：导入某一个目录下的配置文件夹。<br>第二个选项：不导入配置文件夹。(第一次使用选择这一项)。<br>接下来是检查Android SDK，会联网下载Android SDK，需要较长时间。然后设置UI界面，然后是联网下载组件。注意Android Studio第一次打开的时候，安装向导将查找你系统上的JDK和Android SDK的位置。安装向导为Android Studio下载一切开始开发应用程序的东西。点击Finish按钮关闭安装向导。</p><p><img src="http://img.blog.csdn.net/20160121201254608" alt="检查SDK" title="检查SDK"></p><h1 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h1><p>一旦安装向导完成，Android Studio的欢迎对话框将会出现，如下图所示。咱就直接来建第一个项目以此测试Android开发环境适合搭建成功。点击<code>Start a new Android Studio project</code>选项，新建项目。</p><p><img src="http://img.blog.csdn.net/20160121201301754" alt="Welcometo Android Studio" title="Welcometo Android Studio"></p><p>按照新建项目向导，在<code>ApplicationName</code>输入项目工程的名称HelloWorld，在<code>Company Domain </code>中输入咱虚构的域名leon.com。注意包名Package name是反转的Company Domain加上Application Name。创建HelloWorld项目存储在<code>Project location</code>所设置的位置。</p><p><img src="http://img.blog.csdn.net/20160121201312592" alt="新建项目向导" title="新建项目向导"></p><p>点击Next到如下图所示界面，Android操作系统可以在多种平台上运行，包括游戏机，电视机，手表，眼镜，智能手机和平板电脑。默认情况下，手机和平板电脑复选框会被选中，API-19被选为最低的SDK。同意这些设置然后点击Next。</p><p><img src="http://img.blog.csdn.net/20160121201321129" alt="选择APP运行的形式" title="选择APP运行的形式"></p><p>后续新项目向导将提示你选择一种布局。选择<code>BlankActivity</code>然后点击Next按钮。</p><p><img src="http://img.blog.csdn.net/20160121201327801" alt="选择布局" title="选择布局"></p><p>进入Activity设置界面，按照默认设置如，然后点击Finish完成进入工程初始化过程。</p><p><img src="http://img.blog.csdn.net/20160121201332817" alt="Activity设置" title="Activity设置"></p><p>最终生成的工程如下图所示。</p><p><img src="http://img.blog.csdn.net/20160121201336614" alt="HelloWorld工程界面" title="HelloWorld工程界面"></p><p>点击<code>Run app</code>运行按钮即可运行该程序，运行之后选择已连接的Android手机，点击OK后将APP安装到手机上。注意电脑和Android手机之间的连接是使用了一种叫做Android调试桥（ADB）的服务，需要打开手机的USB调试模式。</p><p><img src="http://img.blog.csdn.net/20160121203039511" alt="选择Android手机" title="选择Android手机"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="http://blog.csdn.net/yanbober/article/details/45306483">Android Studio入门到精通</a></li><li><a href="http://blog.csdn.net/column/details/zsl-androidstudio.html">Android Studio 权威教程</a></li><li><a href="http://ask.android-studio.org/?/explore/category-studio">Android Studio使用教程</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;咱从开发环境着手进行Android开发的记录。&lt;br&gt;首先需要安装Java开发工具包(JDK)这个必要组件。然后就是要下载和安装Android Studio以及 Android 软件开发工具包(SDK) 这些都是开发Android应用程序所必需的工具。注意，以下所有操作都是在Windows系统下完成。&lt;/p&gt;</summary>
    
    
    
    <category term="Android基础" scheme="http://xiaoyaolml.github.io/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Android" scheme="http://xiaoyaolml.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>使用 hexo 写博客</title>
    <link href="http://xiaoyaolml.github.io/2016/01/08/%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xiaoyaolml.github.io/2016/01/08/%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/</id>
    <published>2016-01-08T11:42:15.000Z</published>
    <updated>2022-03-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>参照网上的教程，结合<a href="https://hexo.io/zh-cn/docs/index.html">hexo的官方说明文档</a>，折腾折腾，在GitHub上搭建了博客，顺便记录一下这第一篇。</p><span id="more"></span><h1 id="Update-2022-03-13"><a href="#Update-2022-03-13" class="headerlink" title="Update 2022-03-13"></a>Update 2022-03-13</h1><p>换了电脑，想要重新通过hexo写博客到Github Pages上，发现并不能通过git clone的方式直接把内容下载到新电脑上，还是需要把旧电脑上的hexo目录拷贝到新电脑上才能继续使用。</p><hr><h1 id="发布博客3步走"><a href="#发布博客3步走" class="headerlink" title="发布博客3步走"></a>发布博客3步走</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 使用hexo博客</span><br></pre></td></tr></table></figure><p>之后就在 <code>source\_posts\</code> 目录下生成了<strong>使用hexo博客.md</strong>文件，即为这篇博客正文内容。</p><blockquote><p>如果不想博文在首页全部显示, 并能出现<em>阅读全文</em>按钮效果, 需要在你想在首页显示的部分下添加<code>&lt;!--more--&gt;</code></p></blockquote><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>之后就在 <code>public\</code> 目录下生成了与博客相关的静态页面。</p><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>还可以加个 <code>-d</code> 参数 或者 <code>--deploy</code> 表示文件生成后立即部署网站。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>通过以上命令就将 <code>.deploy_git</code> 目录部署到GitHub了。</p><p>该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>默认的访问网址是 <a href="http://localhost:4000/">http://localhost:4000/</a></p><p>命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>选择合适的主题，下载或者克隆到 <code>themes\</code> 目录下，修改 hexo 配置文件 <code>_config.yml</code> 文件中theme行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>再在主题配置文件 <code>themes\next\_config.yml</code> 中作修改即可。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>就此完成了简单的用hexo在github上搭建博客。</p><p>发布新写的博客可以先预览再发布，主要就是以下的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="http://www.jianshu.com/p/858ecf233db9">通过Hexo在Github上搭建博客教程</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;参照网上的教程，结合&lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot;&gt;hexo的官方说明文档&lt;/a&gt;，折腾折腾，在GitHub上搭建了博客，顺便记录一下这第一篇。&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://xiaoyaolml.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://xiaoyaolml.github.io/tags/hexo/"/>
    
    <category term="写作" scheme="http://xiaoyaolml.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xiaoyaolml.github.io/2016/01/01/hello-world/"/>
    <id>http://xiaoyaolml.github.io/2016/01/01/hello-world/</id>
    <published>2016-01-01T04:00:00.000Z</published>
    <updated>2016-05-28T21:02:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
