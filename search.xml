<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[OpenCV4Android学习录Demo1]]></title>
      <url>http://yoursite.com/2016/05/29/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/</url>
      <content type="html"><![CDATA[<p>OpenCV 3.1 在 samples目录下有几个示例Demo，其中第一个例子example-tutorial-1-camerapreview，用来获取摄像头输入帧，这篇博客记录了一下这个Demo在Android Studio下开发过程，以此开启OpenCV for Android之旅。</p>
<a id="more"></a>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>Windows 10 x64<br>JDK 1.8.0<br>Android 6.0（API 23，最低API 18）<br>OpenCV 3.1.0 for Android SDK<br>Android Studio 2.1.1（Gradle版本2.10）  </p>
<h1 id="导入OpenCV库"><a href="#导入OpenCV库" class="headerlink" title="导入OpenCV库"></a>导入OpenCV库</h1><h2 id="Import-Module"><a href="#Import-Module" class="headerlink" title="Import Module"></a>Import Module</h2><p>点击<code>File-&gt;New-&gt;Import Module…</code>，在弹出的窗口中找到OpenCV Android SDK下的sdk\java文件夹，点击Next，保持默认选项不动，再点击Finish，完成OpenCV库的导入。</p>
<p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1%2F%E5%AF%BC%E5%85%A5OpenCV%E5%BA%93.png" alt="Import Module" title="Import Module"></p>
<h2 id="修改build-gradle"><a href="#修改build-gradle" class="headerlink" title="修改build.gradle"></a>修改build.gradle</h2><p>由于OpenCV库本身默认配置，我们需要修改OpenCVLibrary310\build.gradle文件，然后重新同步Gradle配置。修改OpenCVLibrary310\build.gradle文件与项目app的配置一致。修改前如下所示：</p>
<p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1%2F%E4%BF%AE%E6%94%B9%E5%89%8D%E7%9A%84Gradle%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9.png" alt="build.gradle" title="build.gradle修改前"></p>
<p>修改后如下所示：</p>
<p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84Gradle%E9%85%8D%E7%BD%AE%E5%86%85%E5%AE%B9.png" alt="build.gradle" title="build.gradle修改后"></p>
<p>具体对penCVLibrary310\build.gradle的修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.3"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">16</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.txt'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置模块依赖"><a href="#配置模块依赖" class="headerlink" title="配置模块依赖"></a>配置模块依赖</h2><p>点击<code>File-&gt;Project Structure…</code>，在弹出的Project Structure窗口中选择左边的app，在右边选择Dependencies，然后点击绿色添加按钮，选择Module dependency，在弹出的窗口中选择OpenCVLibrary310，一直点击OK，保存并关闭两个窗口。</p>
<!-- <div  align="center">
     <img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96.png"
     width = "75%" height = "75%"" alt="配置模块依赖" title="配置模块依赖"/>
</div> -->
<p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96.png" alt="build.gradle" title="配置模块依赖"></p>
<h2 id="添加jni库"><a href="#添加jni库" class="headerlink" title="添加jni库"></a>添加jni库</h2><p>复制OpenCV-android-sdk/sdk/native目录下的libs目录到工程的main目录下，重命名为jniLibs。</p>
<!-- <div align="center">
     <img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E6%B7%BB%E5%8A%A0JNI%E5%BA%93.png"
     width = "75%" height = "75%"" alt="添加jni库" title="添加jni库"/>
</div> -->
<p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E6%B7%BB%E5%8A%A0JNI%E5%BA%93.png" alt="build.gradle" title="添加jni库"></p>
<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><p>这个例子是基于Android Studio构建OpenCV工程，实现了OpenCV捕捉相机输入帧。工程代码已上传至github：<a href="https://github.com/xiaoyaolml/OpenCV4AndroidTutorial1.git" target="_blank" rel="external">OpenCV4AndroidTutorial1</a>，下面简单介绍一下代码。</p>
<h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><p>一是实现CameraBridgeViewBase.CvCameraViewListener2接口，用于获取摄像头操作；<br>二是加载OpenCV库，在onResume阶段加载。<br>具体可查看<a href="https://github.com/xiaoyaolml/OpenCV4AndroidTutorial1/blob/master/app/src/main/java/com/leon/opencv4android/tutorial1/MainActivity.java" target="_blank" rel="external">MainActivity.java</a></p>
<h2 id="xml布局"><a href="#xml布局" class="headerlink" title="xml布局"></a>xml布局</h2><p>加入OpenCV自带的JavaCameraView组件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">org.opencv.android.JavaCameraView</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/surfaceCamera"</span></span><br><span class="line">    <span class="attr">app:show_fps</span>=<span class="string">"true"</span></span><br><span class="line">    <span class="attr">app:camera_id</span>=<span class="string">"any"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="manifest清单"><a href="#manifest清单" class="headerlink" title="manifest清单"></a>manifest清单</h2><p>添加使用相机权限和文件读写权限，还有应用特性支持：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CAMERA"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.camera"</span> <span class="attr">android:required</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.camera.autofocus"</span> <span class="attr">android:required</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.camera.front"</span> <span class="attr">android:required</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.camera.front.autofocus"</span> <span class="attr">android:required</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><!-- <div  align="center">
     <img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"
     width = "75%" height = "75%"" alt="运行结果" title="运行结果"/>
</div> -->
<p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/OpenCV4Android%E5%AD%A6%E4%B9%A0%E5%BD%95Demo1/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果" title="运行结果"></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li>这个小Demo演示了用Android Studio进行OpenCV开发的操作过程。</li>
<li>我们自建的项目有两种加载OpenCV库的方式：<br><code>OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_1_0, this, mLoaderCallback);</code>使用OpenCV Manager进行初始化，需要安装对应的OpenCV Manager，这种方式下，配置工程时可以直接跳过添加jni库环节；<br><code>mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</code> 使用jni库进行初始化。本例用的就是这种方式，无需安装Manger，只是在配置工程的时候添加jni库。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android自定义画板]]></title>
      <url>http://yoursite.com/2016/03/19/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>参考<a href="http://blog.csdn.net/lmj623565791/article/details/24252901" target="_blank" rel="external">Android 自定义View (一)</a>这篇博客，总结出自定义View的步骤：  </p>
<blockquote>
<p>1、自定义View的属性<br>2、在View的构造方法中获得自定义属性<br>[3、重写onMesure]<br>4、重写onDraw  </p>
</blockquote>
<a id="more"></a>
<p>再参照<a href="http://www.oschina.net/translate/building-paint-application-android" target="_blank" rel="external">构建一个 Android 的简单绘图应用</a>这篇翻译文章，以一个简单的画板例子走走整个流程。画板实现简单的随手涂鸦，双击清屏和按音量键分享的功能。</p>
<h1 id="自义定View"><a href="#自义定View" class="headerlink" title="自义定View"></a>自义定View</h1><h2 id="自定义View的属性"><a href="#自定义View的属性" class="headerlink" title="自定义View的属性"></a>自定义View的属性</h2><p>先在res/values/  下建立一个属性文件(<strong>attrs.xml</strong>), 在里面声明自定义属性。  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MyView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"paintColor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"paintSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>定义了画笔颜色和粗细。</p>
<h2 id="获得自定义属性"><a href="#获得自定义属性" class="headerlink" title="获得自定义属性"></a>获得自定义属性</h2><p>在自定义View的构造方法中获得自定义属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyView);</span><br><span class="line">    <span class="keyword">int</span> paintColor = typedArray.getColor(R.styleable.MyView_paintColor, Color.BLACK);</span><br><span class="line">    <span class="comment">//第二个参数为默认值</span></span><br><span class="line">    <span class="keyword">int</span> paintSize = typedArray.getDimensionPixelSize(R.styleable.MyView_paintSize, <span class="number">12</span>);</span><br><span class="line">    typedArray.recycle();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行画笔的相关设置</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="重写onDraw"><a href="#重写onDraw" class="headerlink" title="重写onDraw"></a>重写onDraw</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    canvas.drawPath(path, paint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重写onTouchEvent事件"><a href="#重写onTouchEvent事件" class="headerlink" title="重写onTouchEvent事件"></a>重写onTouchEvent事件</h3><p>触碰屏幕和拖动手指的路径需要用onTouchEvent事件，并用Path对象封装路径，思路如下：</p>
<ul>
<li>首先，在我们第一次触碰屏幕(<code>MotionEvent.ACTION_DOWN</code>)时创建一个路径。<ul>
<li>这里需要一个双击判断，我们的思路是通过比较两次按下的时间间隔来判断</li>
</ul>
</li>
<li>然后，当手指拖动时，我们不断增加点到路径里(<code>MotionEvent.ACTION_MOVE</code>)</li>
<li>最后，当手指停止时，我们也停止增加点并且invalidate视图强行重绘。</li>
</ul>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> firstClick;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> countClick;<span class="comment">// 点击次数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> pointX = event.getX();</span><br><span class="line">    <span class="keyword">float</span> pointY = event.getY();</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 如果第二次点击距离第一次点击时间过长 那么将第二次点击看为第一次点击</span></span><br><span class="line">            <span class="keyword">if</span> (firstClick != <span class="number">0</span> &amp;&amp; System.currentTimeMillis() - firstClick &gt; <span class="number">200</span>) &#123;</span><br><span class="line">                countClick = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            countClick ++;</span><br><span class="line">            <span class="keyword">if</span> (countClick == <span class="number">1</span>) &#123;</span><br><span class="line">                firstClick = System.currentTimeMillis();</span><br><span class="line">                path.moveTo(pointX, pointY);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (countClick == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> lastClick = System.currentTimeMillis();</span><br><span class="line">                <span class="comment">// 两次点击小于200ms,进行双击清屏操作</span></span><br><span class="line">                <span class="keyword">if</span> (lastClick - firstClick &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                    path.reset();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            path.lineTo(pointX, pointY);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postInvalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此完成了自定义View的过程，接下来就是在程序中使用自定义View了。</p>
<h1 id="使用View"><a href="#使用View" class="headerlink" title="使用View"></a>使用View</h1><h2 id="在XML中布局"><a href="#在XML中布局" class="headerlink" title="在XML中布局"></a>在XML中布局</h2><p>先在布局文件(res/layout/<strong>activity_main.xml</strong>)中声明我们的自定义View。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">tools:context</span>=<span class="string">"com.leon.myappdraw2.MainActivity"</span></span><br><span class="line">    <span class="attr">xmlns:custom</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com.leon.myappdraw2.ui.MyView</span></span><br><span class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/myView"</span></span><br><span class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">      <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">      <span class="attr">custom:paintColor</span>=<span class="string">"#00ffff"</span></span><br><span class="line">      <span class="attr">custom:paintSize</span>=<span class="string">"12dp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于自定义的paintColor和paintSize属性，需要引入 <strong>xmlns:custom=”<a href="http://schemas.android.com/apk/res-auto" target="_blank" rel="external">http://schemas.android.com/apk/res-auto</a>“</strong> 命名空间。</p>
<h2 id="在Acitvity中使用"><a href="#在Acitvity中使用" class="headerlink" title="在Acitvity中使用"></a>在Acitvity中使用</h2><p>在Acitvity中使用，主要实现两个功能：</p>
<ul>
<li>引入自定义View来画图</li>
<li>按音量键保存图片并分享</li>
</ul>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyView myView;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        myView= (MyView) findViewById(R.id.myView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (keyCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_DOWN:</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_UP:</span><br><span class="line">                Bitmap bitmap = Bitmap.createBitmap(myView.getWidth(), myView.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">                Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">                myView.draw(canvas);</span><br><span class="line">                String image = saveBitmap(bitmap);</span><br><span class="line">                <span class="keyword">if</span> (image!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    shareImage(image);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"图片保存失败！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 系统的分享图片</span><br><span class="line">     * <span class="doctag">@param</span> filename 文件名</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shareImage</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        Uri imageUri = Uri.fromFile(<span class="keyword">new</span> File(filename));</span><br><span class="line">        Intent shareIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">        shareIntent.setAction(Intent.ACTION_SEND);</span><br><span class="line">        shareIntent.putExtra(Intent.EXTRA_STREAM, imageUri);</span><br><span class="line">        shareIntent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">        startActivity(Intent.createChooser(shareIntent, <span class="string">"分享到"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 保存图片到本地</span><br><span class="line">     * <span class="doctag">@param</span> bitmap 要保存的bitmap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveBitmap</span><span class="params">(Bitmap bitmap)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String albumPath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)</span><br><span class="line">                + File.separator + getString(R.string.app_name);</span><br><span class="line">        String imagePath = albumPath+File.separator+System.currentTimeMillis() + <span class="string">".png"</span>;</span><br><span class="line"></span><br><span class="line">        File album = <span class="keyword">new</span> File(albumPath);</span><br><span class="line">        <span class="keyword">if</span> (!album.isDirectory()&amp;&amp;!album.mkdirs()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileOutputStream out;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(imagePath);</span><br><span class="line">            bitmap.compress(Bitmap.CompressFormat.PNG, <span class="number">90</span>, out);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="keyword">return</span> imagePath;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在AndroidManifest-xml中设置权限"><a href="#在AndroidManifest-xml中设置权限" class="headerlink" title="在AndroidManifest.xml中设置权限"></a>在AndroidManifest.xml中设置权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><div align="center"><br>    <img src="http://7xrsz8.com1.z0.glb.clouddn.com/2%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E6%9D%BF1.png " width="270" height="480" alt="手写">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>    <img src="http://7xrsz8.com1.z0.glb.clouddn.com/2%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E6%9D%BF2.png" width="270" height="480" alt="分享"><br></div>


<h1 id="注意点备忘"><a href="#注意点备忘" class="headerlink" title="注意点备忘"></a>注意点备忘</h1><h2 id="AppCompat设置全屏"><a href="#AppCompat设置全屏" class="headerlink" title="AppCompat设置全屏"></a>AppCompat设置全屏</h2><p>在res/values/styles.xml中</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar.Fullscreen"</span>&gt;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Markdown中插入图片怎么定义图片的大小或比例"><a href="#Markdown中插入图片怎么定义图片的大小或比例" class="headerlink" title="Markdown中插入图片怎么定义图片的大小或比例"></a><a href="http://www.zhihu.com/question/23378396" target="_blank" rel="external">Markdown中插入图片怎么定义图片的大小或比例</a></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url"</span> <span class="attr">width</span> = "<span class="attr">270</span>" <span class="attr">height</span> = "<span class="attr">480</span>" <span class="attr">alt</span>=<span class="string">"图片名称"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Paint的效果研究"><a href="#Paint的效果研究" class="headerlink" title="Paint的效果研究"></a><a href="http://blog.csdn.net/j236027367/article/details/42496441" target="_blank" rel="external">Paint的效果研究</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 画笔颜色</span></span><br><span class="line">paint.setColor(paintColor);</span><br><span class="line"><span class="comment">// 画笔风格</span></span><br><span class="line">paint.setStyle(Paint.Style.STROKE);</span><br><span class="line"><span class="comment">// 画笔粗细</span></span><br><span class="line">paint.setStrokeWidth(paintSize);</span><br><span class="line"><span class="comment">//设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢</span></span><br><span class="line">paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰</span></span><br><span class="line">paint.setDither(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 圆角效果</span></span><br><span class="line">paint.setPathEffect(<span class="keyword">new</span> CornerPathEffect(<span class="number">50</span>));</span><br></pre></td></tr></table></figure>
<h2 id="Android的Environment类"><a href="#Android的Environment类" class="headerlink" title="Android的Environment类"></a><a href="http://blog.csdn.net/aiqing0119/article/details/7718494" target="_blank" rel="external">Android的Environment类</a></h2><pre><code>getExternalStoragePublicDirectory(String type)的type类型
</code></pre><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>DIRECTORY_PICTURES</td>
<td>图片存放的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_DCIM</td>
<td>相机拍摄照片和视频的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_ALARMS</td>
<td>系统提醒铃声存放的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_DOWNLOADS</td>
<td>下载的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_MOVIES</td>
<td>电影存放的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_MUSIC</td>
<td>音乐存放的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_NOTIFICATIONS</td>
<td>系统通知铃声存放的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_PICTURES</td>
<td>图片存放的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_PODCASTS</td>
<td>系统广播存放的标准目录</td>
</tr>
<tr>
<td>DIRECTORY_RINGTONES</td>
<td>系统铃声存放的标准目录</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android画图一二]]></title>
      <url>http://yoursite.com/2016/03/13/Android%E7%94%BB%E5%9B%BE%E4%B8%80%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>参考<a href="http://blog.csdn.net/u012637501/article/details/43484333" target="_blank" rel="external">Android绘图深度解析</a>这篇博客，通过例子来了解Android画图过程：继承View组件→重写onDraw(canvas)方法，相关类和接口有：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Drawable</td>
<td>绘图结果表现出来的接口</td>
</tr>
<tr>
<td>Bitmap</td>
<td>可以来自资源或文件，也可以在程序中创建，实际上的功能相当于图片的存储空间</td>
</tr>
<tr>
<td>Canvas</td>
<td>代表了”依附”于指定View的画布，通过Canvas类的成员方法能够实现绘制各种图形</td>
</tr>
<tr>
<td>Paint</td>
<td>代表了Canvas上的画笔，主要用于设置绘制风格，画笔颜色，粗细，填充风格等。</td>
</tr>
<tr>
<td>Path</td>
<td>代表任意多条直线连接而成的任意图形，<code>canvas.drawPath(path,paint)</code>来绘制出任意形状的图形，另外通过PathEffect定义绘制路径图形效果</td>
</tr>
<tr>
<td>Shader</td>
<td>定义渐变填充，包含LinearGradient、RadialGradient和 SweepGradient</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>可以看看<a href="http://erbo2008.iteye.com/blog/1545137" target="_blank" rel="external">Android画布绘图</a>这个博客做进一步了解。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>例子代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.LinearGradient;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Path;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Shader;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> com.leon.myappdraw1.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Android画图入门例子</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写该方法，进行绘图</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        canvas.drawColor(Color.WHITE);  <span class="comment">// 把整张画布绘制成白色</span></span><br><span class="line"></span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>); <span class="comment">// 抗锯齿</span></span><br><span class="line">        paint.setColor(Color.BLUE); <span class="comment">// 画笔颜色</span></span><br><span class="line">        paint.setStyle(Paint.Style.STROKE); <span class="comment">// 绘制风格（空心或实心）</span></span><br><span class="line">        paint.setStrokeWidth(<span class="number">3</span>);            <span class="comment">// 线框粗细</span></span><br><span class="line"></span><br><span class="line">        canvas.drawCircle(<span class="number">40</span>, <span class="number">40</span>, <span class="number">30</span>, paint);   <span class="comment">// 绘制圆形</span></span><br><span class="line">        canvas.drawRect(<span class="number">10</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">140</span>, paint); <span class="comment">// 绘制正方形</span></span><br><span class="line">        canvas.drawRect(<span class="number">10</span>, <span class="number">150</span>, <span class="number">70</span>, <span class="number">190</span>, paint); <span class="comment">// 绘制矩形</span></span><br><span class="line">        canvas.drawRoundRect(<span class="keyword">new</span> RectF(<span class="number">10</span>, <span class="number">200</span>, <span class="number">70</span>, <span class="number">230</span>), <span class="number">15</span>, <span class="number">15</span>, paint);<span class="comment">// 绘制圆角矩形</span></span><br><span class="line">        canvas.drawOval(<span class="keyword">new</span> RectF(<span class="number">10</span>, <span class="number">240</span>, <span class="number">70</span>, <span class="number">270</span>), paint);         <span class="comment">// 绘制椭圆</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个Path对象，封闭成一个三角形。</span></span><br><span class="line">        Path path1 = <span class="keyword">new</span> Path();</span><br><span class="line">        path1.moveTo(<span class="number">10</span>, <span class="number">340</span>);</span><br><span class="line">        path1.lineTo(<span class="number">70</span>, <span class="number">340</span>);</span><br><span class="line">        path1.lineTo(<span class="number">40</span>, <span class="number">290</span>);</span><br><span class="line">        path1.close();</span><br><span class="line">        canvas.drawPath(path1, paint);<span class="comment">// 根据Path进行绘制，绘制三角形</span></span><br><span class="line">        <span class="comment">// 定义一个Path对象，封闭成一个五角形。</span></span><br><span class="line">        Path path2 = <span class="keyword">new</span> Path();</span><br><span class="line">        path2.moveTo(<span class="number">26</span>, <span class="number">360</span>);</span><br><span class="line">        path2.lineTo(<span class="number">54</span>, <span class="number">360</span>);</span><br><span class="line">        path2.lineTo(<span class="number">70</span>, <span class="number">392</span>);</span><br><span class="line">        path2.lineTo(<span class="number">40</span>, <span class="number">420</span>);</span><br><span class="line">        path2.lineTo(<span class="number">10</span>, <span class="number">392</span>);</span><br><span class="line">        path2.close();</span><br><span class="line">        canvas.drawPath(path2, paint);<span class="comment">// 根据Path进行绘制，绘制五角形</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------设置填充风格后绘制----------</span></span><br><span class="line">        paint.setStyle(Paint.Style.FILL);</span><br><span class="line">        paint.setColor(Color.RED);</span><br><span class="line">        canvas.drawCircle(<span class="number">120</span>, <span class="number">40</span>, <span class="number">30</span>, paint);              <span class="comment">//绘制圆</span></span><br><span class="line">        canvas.drawRect(<span class="number">90</span>, <span class="number">80</span>, <span class="number">150</span>, <span class="number">140</span>, paint);        <span class="comment">// 绘制正方形</span></span><br><span class="line">        canvas.drawRect(<span class="number">90</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">190</span>, paint);        <span class="comment">// 绘制矩形</span></span><br><span class="line">        canvas.drawRoundRect(<span class="keyword">new</span> RectF(<span class="number">90</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">230</span>), <span class="number">15</span>, <span class="number">15</span>, paint); <span class="comment">// 绘制圆角矩形</span></span><br><span class="line">        canvas.drawOval(<span class="keyword">new</span> RectF(<span class="number">90</span>, <span class="number">240</span>, <span class="number">150</span>, <span class="number">270</span>), paint);        <span class="comment">// 绘制椭圆</span></span><br><span class="line">        Path path3 = <span class="keyword">new</span> Path();</span><br><span class="line">        path3.moveTo(<span class="number">90</span>, <span class="number">340</span>);</span><br><span class="line">        path3.lineTo(<span class="number">150</span>, <span class="number">340</span>);</span><br><span class="line">        path3.lineTo(<span class="number">120</span>, <span class="number">290</span>);</span><br><span class="line">        path3.close();</span><br><span class="line">        canvas.drawPath(path3, paint);        <span class="comment">// 绘制三角形</span></span><br><span class="line">        Path path4 = <span class="keyword">new</span> Path();</span><br><span class="line">        path4.moveTo(<span class="number">106</span>, <span class="number">360</span>);</span><br><span class="line">        path4.lineTo(<span class="number">134</span>, <span class="number">360</span>);</span><br><span class="line">        path4.lineTo(<span class="number">150</span>, <span class="number">392</span>);</span><br><span class="line">        path4.lineTo(<span class="number">120</span>, <span class="number">420</span>);</span><br><span class="line">        path4.lineTo(<span class="number">90</span>, <span class="number">392</span>);</span><br><span class="line">        path4.close();</span><br><span class="line">        canvas.drawPath(path4, paint);         <span class="comment">// 绘制五角形</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------设置渐变器后绘制----------</span></span><br><span class="line">        <span class="comment">// 为Paint设置渐变器</span></span><br><span class="line">        Shader mShader = <span class="keyword">new</span> LinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</span><br><span class="line">                Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#125;, <span class="keyword">null</span>,</span><br><span class="line">                Shader.TileMode.REPEAT);</span><br><span class="line">        paint.setShader(mShader);</span><br><span class="line">        <span class="comment">// 设置阴影</span></span><br><span class="line">        paint.setShadowLayer(<span class="number">25</span>, <span class="number">10</span>, <span class="number">10</span>, Color.GRAY);</span><br><span class="line"></span><br><span class="line">        canvas.drawCircle(<span class="number">200</span>, <span class="number">40</span>, <span class="number">30</span>, paint);<span class="comment">// 绘制圆形</span></span><br><span class="line">        canvas.drawRect(<span class="number">170</span>, <span class="number">80</span>, <span class="number">230</span>, <span class="number">140</span>, paint);<span class="comment">// 绘制正方形</span></span><br><span class="line">        canvas.drawRect(<span class="number">170</span>, <span class="number">150</span>, <span class="number">230</span>, <span class="number">190</span>, paint);<span class="comment">// 绘制矩形</span></span><br><span class="line">        canvas.drawRoundRect(<span class="keyword">new</span> RectF(<span class="number">170</span>, <span class="number">200</span>, <span class="number">230</span>, <span class="number">230</span>), <span class="number">15</span>, <span class="number">15</span>, paint);<span class="comment">// 绘制圆角矩形</span></span><br><span class="line">        canvas.drawOval(<span class="keyword">new</span> RectF(<span class="number">170</span>, <span class="number">240</span>, <span class="number">230</span>, <span class="number">270</span>), paint);<span class="comment">// 绘制椭圆</span></span><br><span class="line"></span><br><span class="line">        Path path5 = <span class="keyword">new</span> Path();</span><br><span class="line">        path5.moveTo(<span class="number">170</span>, <span class="number">340</span>);</span><br><span class="line">        path5.lineTo(<span class="number">230</span>, <span class="number">340</span>);</span><br><span class="line">        path5.lineTo(<span class="number">200</span>, <span class="number">290</span>);</span><br><span class="line">        path5.close();</span><br><span class="line">        canvas.drawPath(path5, paint);<span class="comment">// 根据Path进行绘制，绘制三角形</span></span><br><span class="line"></span><br><span class="line">        Path path6 = <span class="keyword">new</span> Path();</span><br><span class="line">        path6.moveTo(<span class="number">186</span>, <span class="number">360</span>);</span><br><span class="line">        path6.lineTo(<span class="number">214</span>, <span class="number">360</span>);</span><br><span class="line">        path6.lineTo(<span class="number">230</span>, <span class="number">392</span>);</span><br><span class="line">        path6.lineTo(<span class="number">200</span>, <span class="number">420</span>);</span><br><span class="line">        path6.lineTo(<span class="number">170</span>, <span class="number">392</span>);</span><br><span class="line">        path6.close();</span><br><span class="line">        canvas.drawPath(path6, paint);<span class="comment">// 根据Path进行绘制，绘制五角形</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------设置字符大小后绘制字符串----------</span></span><br><span class="line">        paint.setTextSize(<span class="number">24</span>);</span><br><span class="line">        paint.setShader(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//        paint.clearShadowLayer();</span></span><br><span class="line">        <span class="comment">// 绘制字符串</span></span><br><span class="line">        canvas.drawText(<span class="string">"圆形"</span>, <span class="number">240</span>, <span class="number">50</span>, paint);</span><br><span class="line">        canvas.drawText(<span class="string">"正方形"</span>, <span class="number">240</span>, <span class="number">120</span>,paint);</span><br><span class="line">        canvas.drawText(<span class="string">"长方形"</span>, <span class="number">240</span>, <span class="number">175</span>,paint);</span><br><span class="line">        canvas.drawText(<span class="string">"圆角矩形"</span>, <span class="number">230</span>,<span class="number">220</span>, paint);</span><br><span class="line">        canvas.drawText(<span class="string">"椭圆形"</span>, <span class="number">240</span>, <span class="number">260</span>,paint);</span><br><span class="line">        canvas.drawText(<span class="string">"三角形"</span>, <span class="number">240</span>, <span class="number">325</span>, paint);</span><br><span class="line">        canvas.drawText(<span class="string">"五角形"</span>, <span class="number">240</span>, <span class="number">390</span>, paint);</span><br><span class="line">        <span class="comment">//绘制图片</span></span><br><span class="line">        canvas.drawBitmap(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher), <span class="number">500</span>, <span class="number">150</span>, paint);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://7xrsz8.com1.z0.glb.clouddn.com/1%E7%94%BB%E5%9B%BE%E5%85%A5%E9%97%A8.png" alt="1"></p>
<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p>遇到的错误情况记录如下：</p>
<h2 id="Blur-radius-out-of-0-25-pixel-bound"><a href="#Blur-radius-out-of-0-25-pixel-bound" class="headerlink" title="Blur radius out of 0-25 pixel bound"></a><a href="http://stackoverflow.com/questions/23048567/android-signal-11-rs-cpp-error-blur-radius-out-of-0-25-pixel-bound" target="_blank" rel="external">Blur radius out of 0-25 pixel bound</a></h2><p>在Canvas上添加文本。使用一个drawText的时候没有问题，但是使用多个时就报错:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/rsC++: RS CPP error: Blur radius out of <span class="number">0</span>-<span class="number">25</span> pixel bound</span><br><span class="line">E/rsC++: <span class="function">RS CPP <span class="title">error</span> <span class="params">(masked by previous error)</span>: Allocation creation failed</span><br><span class="line">E/rsC++: RS CPP <span class="title">error</span> <span class="params">(masked by previous error)</span>: Allocation creation failed</span><br><span class="line">E/rsC++: RS CPP <span class="title">error</span> <span class="params">(masked by previous error)</span>: Blur radius out of 0-25 pixel bound</span></span><br></pre></td></tr></table></figure></p>
<p>错误代码为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paint.setShadowLayer(<span class="number">45</span>, <span class="number">10</span>, <span class="number">10</span>, Color.GRAY);</span><br></pre></td></tr></table></figure>
<p>设置Text的阴影层半径应在<strong>0~25px</strong><br>所以在绘制字符串时先<code>paint.clearShadowLayer();</code>清理阴影层或者修改半径<code>paint.setShadowLayer(25, 10, 10, Color.GRAY);</code>即可。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>了解Android的常用的画图API</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime 与 Markdown]]></title>
      <url>http://yoursite.com/2016/03/12/Sublime%E4%B8%8EMarkdown/</url>
      <content type="html"><![CDATA[<h1 id="起"><a href="#起" class="headerlink" title="起"></a>起</h1><p>用Markdown来写博客，得选个合适的编辑器，找了网上的资料，看了<a href="http://www.zhihu.com/question/19637157" target="_blank" rel="external">用Markdown写作用什么文本编辑器？</a>和<a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">好用的Markdown编辑器一览</a>两篇内容，发现之前用的Sublime编辑器装装插件也能用，于是就找资料，参照<a href="http://www.jianshu.com/p/aa30cc25c91b" target="_blank" rel="external">Sublime插件：Markdown篇</a>的内容安装配置了一下。<br><a id="more"></a></p>
<h1 id="承"><a href="#承" class="headerlink" title="承"></a>承</h1><p>把整个操作涉及到的常用快捷键总结如下：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+Shift+P</td>
<td>打开Package Control来安装插件</td>
<td></td>
</tr>
<tr>
<td>Ctrl+B</td>
<td>md文件生成html文件</td>
<td>MarkdownPreview插件</td>
</tr>
<tr>
<td>Ctrl+Alt+O</td>
<td>浏览器中实时预览</td>
<td>OmniMarkupPreviwer插件</td>
</tr>
<tr>
<td>Shitf+Tab</td>
<td>快速生成表格  <a href="http://upload-images.jianshu.io/upload_images/26219-256230846b591b50.gif" target="_blank" rel="external">预览效果</a></td>
<td>TabEditor插件</td>
</tr>
</tbody>
</table>
<p>另外补充几个用得比较多的快捷键：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+D</td>
<td>选择单词</td>
</tr>
<tr>
<td>Ctrl+L</td>
<td>选择一行</td>
</tr>
<tr>
<td>Ctrl+X</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Ctrl+Shift+上下键</td>
<td>上下移动一行</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td>查找内容</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>注释行</td>
</tr>
<tr>
<td>Shift+F11</td>
<td>全屏</td>
</tr>
<tr>
<td>Ctrl+K+B</td>
<td>侧边栏开关</td>
</tr>
</tbody>
</table>
<p>关于Sublime Text更多的内容可以去<a href="http://www.jianshu.com/p/d1b9a64e2e37" target="_blank" rel="external">Sublime Text：学习资源篇</a>看看。</p>
<h1 id="转"><a href="#转" class="headerlink" title="转"></a>转</h1><p>上手了编辑器之后，还得对markdown语法有一点了解，<a href="http://xianbai.me/learn-md/" target="_blank" rel="external">Learning-Markdown (Markdown 入门参考)</a>和<a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a>这两份文档可以看看，还有这个<a href="http://daringfireball.net/projects/markdown/dingus" target="_blank" rel="external">markdown 在线练习</a>网站可以练练手，不过我是直接在sublime中边写边练习。</p>
<p>常用的几个语法内容如下：</p>
<h2 id="1-标题样式"><a href="#1-标题样式" class="headerlink" title="1.标题样式"></a>1.标题样式</h2><ul>
<li>大标题：<code># 大标题</code> 最大一级标题</li>
<li>二级标题：<code>## 二级标题</code></li>
<li>小标题：<code>### 小标题</code> 最小六级标题</li>
</ul>
<h2 id="2-文本样式"><a href="#2-文本样式" class="headerlink" title="2.文本样式"></a>2.文本样式</h2><h3 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h3><ol>
<li>无序列表：<code>* + -</code></li>
<li>有序列表：<code>1. 2.</code></li>
</ol>
<h3 id="2-2-内容"><a href="#2-2-内容" class="headerlink" title="2.2 内容"></a>2.2 内容</h3><ul>
<li><strong>粗体</strong>：<code>**粗体**</code></li>
<li><em>斜体</em>： <code>*斜体*</code></li>
</ul>
<blockquote>
<p>引用：<code>&gt;引用</code></p>
<blockquote>
<p>嵌套引用：<code>&gt;&gt;嵌套引用</code></p>
</blockquote>
<p><strong>引用中可以使用其他语法</strong></p>
</blockquote>
<p>分割线：<code>---</code></p>
<hr>
<h2 id="3-代码样式"><a href="#3-代码样式" class="headerlink" title="3.代码样式"></a>3.代码样式</h2><p>内嵌代码：<code>print(&#39;Hello Markdown.&#39;)</code><br>代码块：</p>
<pre><code>print(&apos;开头Tab键，表示一行代码&apos;)
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Hello!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-超链接"><a href="#4-超链接" class="headerlink" title="4.超链接"></a>4.超链接</h2><p>文字链接：<br><a href="https://xiaoyaolml.github.io/" target="_blank" rel="external">我的博客</a></p>
<p>图片链接：</p>
<p><img src="https://avatars1.githubusercontent.com/u/8487928?v=3&amp;s=460" alt="我的头像" title="我的头像"></p>
<h1 id="合"><a href="#合" class="headerlink" title="合"></a>合</h1><p>开始体验Markdown+Sublime书写之旅吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[上手Android Studio之二(基本使用)]]></title>
      <url>http://yoursite.com/2016/01/29/%E4%B8%8A%E6%89%8BAndroid%20Studio%E4%B9%8B%E4%BA%8C(%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8)/</url>
      <content type="html"><![CDATA[<p>经过以上一篇<a href="http://xiaoyaolml.github.io/2016/01/22/%E4%B8%8A%E6%89%8BAndroid%20Studio%E4%B9%8B%E4%B8%80%28%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%29/#more" target="_blank" rel="external">上手Android Studio之一(基本配置)</a>折腾，接下来咱就来看看用Android Studio做开发的基本使用。</p>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[上手Android Studio之一(基本配置)]]></title>
      <url>http://yoursite.com/2016/01/22/%E4%B8%8A%E6%89%8BAndroid%20Studio%E4%B9%8B%E4%B8%80(%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE)/</url>
      <content type="html"><![CDATA[<p>主要内容包括：Android Studio 的基本配置、常用插件、Gradle构建系统初步、第三方库导入等。<br><a id="more"></a></p>
<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="配置IDE主题"><a href="#配置IDE主题" class="headerlink" title="配置IDE主题"></a>配置IDE主题</h2><p>接上一篇<a href="http://xiaoyaolml.github.io/2016/01/15/%E4%BB%8EAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%A7%8B/" target="_blank" rel="external">从Android开发环境搭建开始</a>，其实，咱在安装AS的留了个坑，那就是关于主题的配置，如果是默认安装，主题是灰白色的，而咱选了一个暗黑系的Darcula主题。关于主题设置需要打开Settings窗口，操作如下：点击<code>设置</code>图标-&gt;Appearance-&gt;选择Theme-&gt;点击<code>Apply</code>，主题就设置好了。</p>
<p><img src="http://img.blog.csdn.net/20160205113849162" alt="设置IDE主题" title="设置IDE主题"></p>
<h2 id="配置代码主题"><a href="#配置代码主题" class="headerlink" title="配置代码主题"></a>配置代码主题</h2><p>默认的几个主题咱没办法修改，需要自定义一个主题才行，仍旧是在Settings窗口中，在Editor-&gt;Colors&amp; Fonts栏，先选择Darcula然后再点击Save As，在弹出窗口Name文本框里自定义Darcula copy的主题，如下图所示。点击OK在点击Apply后自定义主题就设置好了。</p>
<p><img src="http://img.blog.csdn.net/20160205113856039" alt="自定义主题" title="自定义主题"></p>
<p>然后就可以配置代码主题了。咱做的配置如下：</p>
<ol>
<li><p>代码字体、大小、间距<br>在Editor→Colors&amp; Font→Font栏：选择Scheme为自定义的Darculacopy，选择Primaryfont 字体为Monospaced，选择Size大小为20，选择Line spacing间距为1.0。</p>
</li>
<li><p>自动导包<br>在Editot→General→Auto Import栏：勾上“Optimize imports on the fly”和“Add unambiguous imports on the fly”。</p>
</li>
<li><p>显示行号<br>在Editot→General→Appearance栏，勾上“Show line numbers”。</p>
</li>
<li><p>代码提示不区分大小写<br>在Editor→General→Code Completion，将”Case sensitive completion”设置为None。</p>
</li>
</ol>
<h2 id="配置Logcat颜色"><a href="#配置Logcat颜色" class="headerlink" title="配置Logcat颜色"></a>配置Logcat颜色</h2><p>默认AS的logcat只有Error和Assert是红色的。做完配置后如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160205113901584" alt="Logcat效果预览" title="Logcat效果预览"></p>
<p>具体操作步骤如下：<br>在Editor→Colors&amp; Fonts→Android Logcat栏，依次选择Assert、Debug、Error等选项操作，然后将Useinherited attributes 去掉勾选，再双击Foreground后面的颜色框去选择颜色，颜色选择参考如下表所示。最后点击Apply即可。</p>
<table>
<thead>
<tr>
<th>Log级别</th>
<th>颜色值</th>
</tr>
</thead>
<tbody>
<tr>
<td>VERBOSE</td>
<td>BBBBBB</td>
</tr>
<tr>
<td>DEBUG</td>
<td>0070BB</td>
</tr>
<tr>
<td>INFO</td>
<td>48BB31</td>
</tr>
<tr>
<td>WARN</td>
<td>BBBB23</td>
</tr>
<tr>
<td>ERROR</td>
<td>FF0006</td>
</tr>
<tr>
<td>ASSERT</td>
<td>8F0005</td>
</tr>
</tbody>
</table>
<h2 id="统一文件编码"><a href="#统一文件编码" class="headerlink" title="统一文件编码"></a>统一文件编码</h2><p>统一文件编码为UTF-8。在Editor→File Encodings栏，分别设置IDE Encoding位UTF-8，设置ProjectEncoding为UTF-8，设置properties file的编码为UTF-8，并勾上<code>Transparent native-to-asciiconversion</code>，如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160205113906303" alt="设置编码" title="设置编码"></p>
<h2 id="导出-导入配置"><a href="#导出-导入配置" class="headerlink" title="导出/导入配置"></a>导出/导入配置</h2><p>做了这么多配置，接下来就是导出配置了，方便以后直接导入配置，以免遇到意外情况咱又得重新配置了啊。点击菜单栏的File→Export Settings，弹出导出设置窗口，选一下导出路径，默认把所以内容都导出到settings.jar。</p>
<p><img src="http://img.blog.csdn.net/20160205113910462" alt="导出设置" title="导出设置"></p>
<p>导入设置就更简单了，点击菜单栏的FileàImport Settings，弹出导出设置窗口，选择要导入的settings.jar文件，点击OK即可。</p>
<p><img src="http://img.blog.csdn.net/20160205113914243" alt="导入设置" title="导入设置"></p>
<h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><h2 id="如何添加插件"><a href="#如何添加插件" class="headerlink" title="如何添加插件"></a>如何添加插件</h2><p>关于插件的操作都是在Settings→Plugins栏里，如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160205113922350" alt="Plugins设置" title="Plugins设置"></p>
<p>可以看到有三种安装插件的方式，一个是<code>JetBrains plugin</code>官方插件，一个是<code>Browse repositories</code>来自仓库的插件，最后一个是离线安装本地插件。其中前两种插件的安装方式差不多，咱以安装Genymotion为例记录一下操作流程。点击Browse repositories弹出一个新窗口，在搜索栏中输入Genymotion搜索，在搜索结果右侧出现Install plugin的绿色安装，点击即可联网安装该插件，完成之后会要求重启AS，如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160205113926428" alt="安装Genymotion插件" title="安装Genymotion插件"></p>
<p>另一种本地安装的方式，点击Install plugin from disk后选择下载好的插件包即可安装，完成之后同样需要重启AS使得插件生效。</p>
<h2 id="几个常用插件"><a href="#几个常用插件" class="headerlink" title="几个常用插件"></a>几个常用插件</h2><p>除了前面举例子安装的Genymotion插件外，咱再列举几个常用的插件。如何使用就不展开了，后面涉及到了再说。</p>
<ol>
<li><p>GsonFormat。<br>生成Gson相应的实体类，项目地址：<a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="external">https://github.com/zzz40500/GsonFormat</a></p>
</li>
<li><p>AndroidParcelable Code Generator<br>parcelable  序列化代码补全，项目地址：<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="external">https://github.com/mcharmas/android-parcelable-intellij-plugin</a></p>
</li>
<li><p>Android MaterialDesign Icon Generator<br>material-design-icon资源生成器，项目地址：<a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">https://github.com/konifar/android-material-design-icon-generator-plugin</a></p>
</li>
<li><p>SelectorChapekfor Android<br>根据资源自动生成相应的selector，免得对selector文件复制粘贴了。项目地址：<a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">https://github.com/inmite/android-selector-chapek</a></p>
</li>
<li><p>ButterKnifeZelezny<br>快速生成butterknife注入代码，项目地址：<a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">https://github.com/avast/android-butterknife-zelezny</a></p>
</li>
<li><p>idea-markdown<br>markdown插件，项目地址：<a href="https://github.com/nicoulaj/idea-markdown" target="_blank" rel="external">https://github.com/nicoulaj/idea-markdown</a></p>
</li>
<li><p>Codota<br>搜索代码的插件，项目地址：<a href="https://www.codota.com/" target="_blank" rel="external">https://www.codota.com/</a></p>
</li>
<li><p>ADB Idea<br>通过该插件可以轻松完成以下操作而不用手动输入ADB命令。项目地址：<a href="https://github.com/pbreault/adb-idea" target="_blank" rel="external">https://github.com/pbreault/adb-idea</a></p>
</li>
<li><p>Android DrawableImporter<br>Android Drawable Importer添加了一个在不同分辨率导入画板或缩放指定图像到定义分辨率的选项。这个插件加速了开发人员的画板工作。项目地址：<a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin" target="_blank" rel="external">https://github.com/winterDroid/android-drawable-importer-intellij-plugin</a></p>
</li>
<li><p>Android HoloColors Generator<br>此插件会生成所有必要的可在项目中使用的相关的XML画板和样式资源。项目地址：<a href="https://github.com/jeromevdl/android-holo-colors-idea-plugin" target="_blank" rel="external">https://github.com/jeromevdl/android-holo-colors-idea-plugin</a></p>
</li>
</ol>
<h1 id="Gradle构建系统初体验"><a href="#Gradle构建系统初体验" class="headerlink" title="Gradle构建系统初体验"></a>Gradle构建系统初体验</h1><p>Gradle 是以 Groovy 语言为基础，面向Java应用为主。基于DSL（领域特定语言）语法的自动化构建工具。Gradle通过提供说明性语言元素将说明性构建推到下一层。这些元素也提供build-by-convention支持Java、Groovy、OSGi、Web和Scala项目。而且，这个说明性语言是可扩展的。添加自己的新语言元素或提高现有的，从而提供简洁、易于维护和理解构建。</p>
<h2 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a>安装Gradle</h2><p>在咱<a href="http://xiaoyaolml.github.io/2016/01/15/%E4%BB%8EAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%A7%8B/" target="_blank" rel="external">上一篇</a>测试开发环境的时候新建HelloWorld项目后会自动下载Gradle到C:\Users\&lt;用户名&gt;.gradle\wrapper\dists目录，生成一个名为gradle-x.xx-all的文件夹。</p>
<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>先来看看项目构建文件HelloWorld/build.gradle，内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build filewhere you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()                                       <span class="comment">// 声明仓库的源</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span> <span class="comment">// 声明gradle的版本</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here;they belong</span></span><br><span class="line">        <span class="comment">// in the individual modulebuild.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()                                   <span class="comment">// 所有项目的存储库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内容主要包含：一是声明仓库的源，这里可以看到是指明的jcenter()，之前版本则是mavenCentral()，jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本，最后是所有项目的存储库。</p>
<p>再来看看模块构建文件HelloWorld/app/build.gradle，内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">applyplugin: <span class="string">'com.android.application'</span>       <span class="comment">// 声明是Android程序</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span>                     <span class="comment">// 编译SDK的版本</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span>               <span class="comment">// build tools的版本</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.leon.helloworld"</span>  <span class="comment">// 应用的包名</span></span><br><span class="line">        minSdkVersion <span class="number">18</span>                     <span class="comment">// 最小SDK的版本</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span>                  <span class="comment">// 目标SDK的版本</span></span><br><span class="line">        versionCode <span class="number">1</span>                        <span class="comment">// 版本号</span></span><br><span class="line">        versionName <span class="string">"1.0"</span>                    <span class="comment">// 版本名称</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;                            <span class="comment">// 正式版配置</span></span><br><span class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies </span>&#123;                                <span class="comment">// 依赖配置</span></span><br><span class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span><br><span class="line">    compile 'com.android.support:appcompat-v7:23.0.1'</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p> 在正式版配置中，minifyEnable false 是apk是否变小压缩apk的意思；proguardFiles这部分有两段，前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，免去了我们很多事，这个文件的目录在 <sdk目录>/tools/proguard/proguard-android.txt，后一部分是我们项目里的自定义的混淆文件，就在 app/proguard-rules.pro，在这个文件里你可以声明一些第三方依赖的一些混淆规则。最终混淆的结果是这两部分文件共同作用的。<br>在依赖配置中，一般有这三种依赖关系：模块依赖，远程二进制依赖和本地二进制依赖。上面内容中的依赖分别是本地依赖和远程依赖。</sdk目录></p>
<p>再来看看gradle项目设置配置文件HelloWorld/settings.gradle，内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include<span class="string">':app'</span></span><br></pre></td></tr></table></figure>
<p>主要声明一些需要加入gradle的模块，本例中只有一个app模块，如果还有其他module都需要按照如上格式加进去。</p>
<p>最后来看看SDK/NDK配置文件HelloWorld/local.properties，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## This file is automatically generated by Android Studio.</span><br><span class="line"># Do not modify this file -- YOUR CHANGES WILL BE ERASED!</span><br><span class="line">#</span><br><span class="line"># This file must *NOT* be checked into Version Control Systems,</span><br><span class="line"># as it contains information specific to your local configuration.</span><br><span class="line">#</span><br><span class="line"># Location of the SDK. This is only used by Gradle.</span><br><span class="line"># For customization when using a Version Control System, please read the</span><br><span class="line"># header note.</span><br><span class="line">#Tue Jan 19 21:34:45 CST 2016</span><br><span class="line">sdk.dir=D\:\\Programs\\android-sdk</span><br></pre></td></tr></table></figure>
<p>主要是配置sdk和ndk的路径，本例中只有SDK的路径。<br>关于gradle的基础知识先到这里。</p>
<h1 id="导入第三方库"><a href="#导入第三方库" class="headerlink" title="导入第三方库"></a>导入第三方库</h1><p>主要提一下几个咱平时用到的导入方法。</p>
<h2 id="Gradle-直接添加法"><a href="#Gradle-直接添加法" class="headerlink" title="Gradle 直接添加法"></a>Gradle 直接添加法</h2><p>以<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a>为例，从官方指导上可以看到添加这个库需要在gradle依赖配置中添加一行代码即可，如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160205113935740" alt="QuickSetup" title="QuickSetup"></p>
<p>同步一下gradle设置即可，如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160205113942881" alt="添加远程依赖库" title="添加远程依赖库"></p>
<h2 id="jar-包直接导入法"><a href="#jar-包直接导入法" class="headerlink" title="jar 包直接导入法"></a>jar 包直接导入法</h2><p>以<a href="https://github.com/LuckyJayce/ViewPagerIndicator" target="_blank" rel="external">ViewPagerIndicator</a>为例，下载完最新jar包，放到app/libs目录，选中该库，鼠标右键，选择Add As Library，如下图所示，然后在弹出的Create Library窗口点击OK即可。</p>
<p><img src="http://img.blog.csdn.net/20160205113947447" alt="添加本地依赖库" title="添加本地依赖库"></p>
<p>完成之后，可以看到jar包多了个展开三角形，并且在app/build.gradle下生成了一行代码compilefiles(‘libs/ViewpagerIndicator_1.0.2.jar’)，如下图所示，所以还有另一种方法就是直接在app/build.gradle文件中添加这一行代码即可。</p>
<p><img src="http://img.blog.csdn.net/20160205113951943" alt="添加成功" title="添加成功"></p>
<h2 id="so-库简单粗暴法"><a href="#so-库简单粗暴法" class="headerlink" title="so 库简单粗暴法"></a>so 库简单粗暴法</h2><p>直接在app/src/main目录下创建jniLibs目录，再将so文件拷贝到该目录内即可。</p>
<h2 id="部分开源库折腾法"><a href="#部分开源库折腾法" class="headerlink" title="部分开源库折腾法"></a>部分开源库折腾法</h2><p>以下拉刷新库<a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">Android-PullToRefresh</a>为例，先把项目下载到本地。<br>在咱自建的项目的根目录创建一个libraries目录，将Android-PullToRefresh-master中的library重名为pulltorefresh，放入新建的libraries目录下，在pulltorefresh中再创建build.gradle文件。如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160205113956678" alt="第三方类库结构" title="第三方类库结构"></p>
<p>其中build.gradle文件的内容与项目的gradle配置一致，具体参考project项目构建文件和app模块构建文件。本例的设置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'android-library'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">18</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            resources.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            res.srcDirs = [<span class="string">'res'</span>]</span><br><span class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来是在gradle项目设置配置文件(HelloWorld/settings.gradle)中引入这个类库模块。本例的设置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include<span class="string">':app'</span>, <span class="string">':libraries:pulltorefresh'</span></span><br></pre></td></tr></table></figure>
<p>最后在app模块构建文件中添加依赖项。本例的设置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">compile <span class="title">project</span><span class="params">(<span class="string">':libraries:pulltorefresh'</span>)</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>做完以上配置，同步一下Gradle即可。要说明的是，根据实际情况，该库在导入时遇到一个问题，即PullToRefreshWebView.java代码中FloatMath.floor函数报错，解决办法是直接将此函数修改成Math.floor替换即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从Android开发环境搭建开始]]></title>
      <url>http://yoursite.com/2016/01/15/%E4%BB%8EAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<p>咱从开发环境着手进行Android开发的记录。<br>首先需要安装Java开发工具包(JDK)这个必要组件。然后就是要下载和安装Android Studio以及 Android 软件开发工具包(SDK) 这些都是开发Android应用程序所必需的工具。注意，以下所有操作都是在Windows系统下完成。<br><a id="more"></a></p>
<h1 id="JAVA-开发环境"><a href="#JAVA-开发环境" class="headerlink" title="JAVA 开发环境"></a>JAVA 开发环境</h1><p>Android Studio 使用java编译环境构建，因此在开始使用Android Studio之前要确保你已经安装Java开发工具包（JDK）。</p>
<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>可以从<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">Oracle网站</a>上获取Java SE Development Kit 8 (jdk8)，勾选Accept License Agreement后，根据电脑的windows版本选择32位或者64位的JDK下载。（注意本内容的操作时间为2015.09.21，根据实际情况下载最新版本的JDK。）</p>
<p><img src="http://img.blog.csdn.net/20160121201945154" alt="JDK下载" title="JDK下载"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>找到安装文件然后双击执行。当安装开始，你将看到安装向导，在Windows系统下，JDK默认安装在C:\ProgramFiles\Java\目录下。要更改安装目录的位置，请单击Change按钮。建议安装JDK的目录的路径名中不包含空格。一直点击“下一步”，期间会弹出安装Java运行环境(JRE)，选择跟JDK安装位置相同的目录。如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160121201945154" alt="点击下一步" title="点击下一步"></p>
<p><img src="http://img.blog.csdn.net/20160121201200971" alt="安装JRE" title="安装JRE"></p>
<p>安装完成后，可以看到如下图所示的两个文件夹，分别为jdk1.8.0_60和jre1.8.0_60。</p>
<p><img src="http://img.blog.csdn.net/20160121201200971" alt="安装完成后的文件夹" title="安装完成后的文件夹"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>DK安装完成之后，需要配置JAVA_HOME到环境变量以便Android Studio找到JDK。具体操作过程如下：<br>我的电脑单击右键打开属性-&gt;单击高级系统设置选项。</p>
<p><img src="http://img.blog.csdn.net/20160121201216612" alt="Windows系统设置" title="Windows系统设置"></p>
<p>新建环境变量名JAVA_HOME，变量值为自己实际安装的jdk安装路径。</p>
<p><img src="http://img.blog.csdn.net/20160121201224268" alt="设置JAVA_HOME环境变量" title="设置JAVA_HOME环境变量"></p>
<p> 最后，还需要编辑PATH环境变量。如图1.6所示。将光标移动到变量值的最后面然后输入如下路径：<code>;%JAVA_HOME%\bin</code></p>
<p><img src="http://img.blog.csdn.net/20160121201229748" alt="设置PATH环境变量" title="设置PATH环境变量"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>cmd命令行窗口下运行java –version命令来查看当前java版本信息。</p>
<p><img src="http://img.blog.csdn.net/20160121201234472" alt="确认JDK安装成功" title="确认JDK安装成功"></p>
<h1 id="Android-Studio-开发环境"><a href="#Android-Studio-开发环境" class="headerlink" title="Android Studio 开发环境"></a>Android Studio 开发环境</h1><p>好了，有了上面的JDK环境之后，可以进行AndroidStudio安装配置了。</p>
<h2 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h2><p>可以从<a href="http://www.android-studio.org/" target="_blank" rel="external">Android Studio中文社区官网</a>上获取最新版的Android Studio，注意安装包分为含SDK版本和不含SDK版本，咱就下载推荐的包含SDK的Android Studio。如下图所示（注意本内容的操作时间为2015.09.21，根据实际情况下载最新版本）</p>
<p><img src="http://img.blog.csdn.net/20160121201237608" alt="Android Studio下载" title="Android Studio下载"></p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>找到安装文件然后双击执行。当安装开始，你将看到安装向导，一路点击Next按钮直到Android Studio和Android SDK都安装完成。</p>
<p><img src="http://img.blog.csdn.net/20160121201241378" alt="Android Studio安装" title="Android Studio安装"></p>
<p>安装完成后打开，看到如下图所示的窗口。</p>
<p><img src="http://img.blog.csdn.net/20160121201245327" alt="Android Studio完成安装" title="Android Studio完成安装"></p>
<p>每一次安装，都会显示这个界面。用以选择导入Android Studio的配置文件。<br>第一个选项：导入某一个目录下的配置文件夹。<br>第二个选项：不导入配置文件夹。(第一次使用选择这一项)。<br>接下来是检查Android SDK，会联网下载Android SDK，需要较长时间。然后设置UI界面，然后是联网下载组件。注意Android Studio第一次打开的时候，安装向导将查找你系统上的JDK和Android SDK的位置。安装向导为Android Studio下载一切开始开发应用程序的东西。点击Finish按钮关闭安装向导。</p>
<p><img src="http://img.blog.csdn.net/20160121201254608" alt="检查SDK" title="检查SDK"></p>
<h1 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h1><p>一旦安装向导完成，Android Studio的欢迎对话框将会出现，如下图所示。咱就直接来建第一个项目以此测试Android开发环境适合搭建成功。点击<code>Start a new Android Studio project</code>选项，新建项目。</p>
<p><img src="http://img.blog.csdn.net/20160121201301754" alt="Welcometo Android Studio" title="Welcometo Android Studio"></p>
<p>按照新建项目向导，在<code>ApplicationName</code>输入项目工程的名称HelloWorld，在<code>Company Domain</code>中输入咱虚构的域名leon.com。注意包名Package name是反转的Company Domain加上Application Name。创建HelloWorld项目存储在<code>Project location</code>所设置的位置。</p>
<p><img src="http://img.blog.csdn.net/20160121201312592" alt="新建项目向导" title="新建项目向导"></p>
<p>点击Next到如下图所示界面，Android操作系统可以在多种平台上运行，包括游戏机，电视机，手表，眼镜，智能手机和平板电脑。默认情况下，手机和平板电脑复选框会被选中，API-19被选为最低的SDK。同意这些设置然后点击Next。</p>
<p><img src="http://img.blog.csdn.net/20160121201321129" alt="选择APP运行的形式" title="选择APP运行的形式"></p>
<p>后续新项目向导将提示你选择一种布局。选择<code>BlankActivity</code>然后点击Next按钮。</p>
<p><img src="http://img.blog.csdn.net/20160121201327801" alt="选择布局" title="选择布局"></p>
<p>进入Activity设置界面，按照默认设置如，然后点击Finish完成进入工程初始化过程。</p>
<p><img src="http://img.blog.csdn.net/20160121201332817" alt="Activity设置" title="Activity设置"></p>
<p>最终生成的工程如下图所示。</p>
<p><img src="http://img.blog.csdn.net/20160121201336614" alt="HelloWorld工程界面" title="HelloWorld工程界面"></p>
<p>点击<code>Run app</code>运行按钮即可运行该程序，运行之后选择已连接的Android手机，点击OK后将APP安装到手机上。注意电脑和Android手机之间的连接是使用了一种叫做Android调试桥（ADB）的服务，需要打开手机的USB调试模式。</p>
<p><img src="http://img.blog.csdn.net/20160121203039511" alt="选择Android手机" title="选择Android手机"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://blog.csdn.net/yanbober/article/details/45306483" target="_blank" rel="external">Android Studio入门到精通</a></li>
<li><a href="http://blog.csdn.net/column/details/zsl-androidstudio.html" target="_blank" rel="external">Android Studio 权威教程</a></li>
<li><a href="http://ask.android-studio.org/?/explore/category-studio" target="_blank" rel="external">Android Studio使用教程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 hexo 写博客]]></title>
      <url>http://yoursite.com/2016/01/08/%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>参照<a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">HEXO+Github,搭建属于自己的博客</a>和<a href="http://www.jianshu.com/p/858ecf233db9" target="_blank" rel="external">通过Hexo在Github上搭建博客教程</a>这两篇文章，结合<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">heox的官方说明文档</a>，折腾折腾，在GitHub上搭建了博客。顺便记录一下这第一篇。<br><a id="more"></a></p>
<h1 id="所用的命令"><a href="#所用的命令" class="headerlink" title="所用的命令"></a>所用的命令</h1><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\hexoblog&gt;hexo new 使用hexo博客</span><br></pre></td></tr></table></figure>
<p>之后就在D:\hexoblog\source_posts\目录下生成<strong>使用hexo博客.md</strong>文件，即为这篇博客正文内容。</p>
<blockquote>
<p>如果不想博文在首页全部显示, 并能出现<em>阅读全文</em>按钮效果, 需要在你想在首页显示的部分下添加<code>&lt;!--more--&gt;</code></p>
</blockquote>
<h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\hexoblog&gt;hexo generate</span><br></pre></td></tr></table></figure>
<p>之后就在D:\hexoblog\public\目录下生成了与博客相关的静态页面。</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\hexoblog&gt;hexo deploy</span><br></pre></td></tr></table></figure>
<p>通过以上命令就将.deploy_git目录部署到GitHub了。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>选择合适的主题，下载或者克隆到D:\hexoblog\themes\目录下，修改D:\hexoblog\_config.yml文件中theme行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure></p>
<p>再在主题配置文件D:\hexoblog\themes\yilia\_config.yml中作修改即可。</p>
<h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>就此完成了简单的用hexo在github上搭建博客。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/01/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
